{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The reference system With the distributed development of ROS across many different organizations it is sometimes hard to benchmark and concretely show how a certain change to a certain system improves or reduces the performance of that system. For example did a change from one executor to another actually reduce the CPU or was it something else entirely? The reference_system package was developed to provide the fundamental building blocks to create complex systems that then can be used to evaluate features or performance in a standardized and repeatable way. The first project to use this reference_system is the autoware_reference_system . Future reference systems could be proposed that are more complex using the same basic node building blocks within the reference_system package. Defining a reference system A reference system is defined by: A fixed number of nodes each node with: a fixed number of publishers and subscribers a fixed processing time or a fixed publishing rate the reference_system base package defines reusable base node types to be used in various reference systems A fixed message type of fixed size to be used for every node For simplicity and ease of benchmarking, all nodes must run on a single process Reference systems can run on what is referred to as a platform . A platform is defined by: - Hardware (e.g. an off-the-shelf single-board computer, embedded ECU, etc.) - if there are multiple configurations available for such hardware, ensure it is specified - Operating System (OS) like RT Linux, QNX, etc. along with any special configurations made With these defined attributes the reference system can be replicated across many different possible configurations to be used to benchmark each configuration against the other in a reliable and fair manner. With this approach portable and repeatable tests can also be defined to reliably confirm if a given reference system meets the requirements. Supported Platforms To enable as many people as possible to replicate this reference system, the platform(s) were chosen to be easily accessible (inexpensive, high volume), have lots of documentation, large community use and will be supported well into the future. Platforms were not chosen for performance of the reference system - we know we could run \u201cfaster\u201d with a more powerful CPU or GPU but then it would be harder for others to validate findings and test their own configurations. Accessibility is the key here and will be considered if more platforms want to be added to this benchmark list. Platforms: Raspberry Pi 4B : 4 GB RAM version is the assumed default other versions could also be tested / added by the community real-time Linux kernel Note: create an issue to add more platforms to the list, keeping in mind the above criteria !!! warning Each reference system can be run on other targets as well however the results will change drastically depending on the specifications of the target hardware. Implemented reference systems The first reference system benchmark proposed is based on the Autoware.Auto LiDAR data pipeline as stated above and shown in the node graph image above as well. Autoware Reference System ROS2 Executors Single Threaded Static Single Threaded Multithreaded Callback Group Prioritized Results below show various characteristics of the same simulated system (Autoware.Auto). Setup Raspberry Pi 4 for the test The goal is to provide a clean computation environment for the test avoiding an interference of other Ubuntu components. Setup a constant CPU frequency Frequency is setup to 1.50 GHz for all CPUs # run it as root sudo su echo -n \"setup constant CPU frequency to 1.50 GHz ... \" # disable ondemand governor systemctl disable ondemand # set performance governor for all cpus echo performance | tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor >/dev/null # set constant frequency echo 1500000 | tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_min_freq >/dev/null echo 1500000 | tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_max_freq >/dev/null # reset frequency counters echo 1 | tee /sys/devices/system/cpu/cpu*/cpufreq/stats/reset >/dev/null echo done sleep 1 # get freq info echo `cpufreq-info | grep stats | cut -d ' ' -f 23-25` Isolate CPUs CPU 2,3 are isolated to run tests. sudo apt install -y sysstat u-boot-tools # modify kernel cmdline cd ~ dd if=/boot/firmware/boot.scr of=boot.script bs=72 skip=1 # edit boot.script and modify bootargs to ubuntu@ubuntu:~$ cat boot.script | grep \"setenv bootargs\" | head -1 setenv bootargs \" ${bootargs} rcu_nocbs=2,3 nohz_full=2,3 isolcpus=2,3 irqaffinity=0,1 audit=0 watchdog=0 skew_tick=1 quiet splash\" # generate boot.scr mkimage -A arm64 -O linux -T script -C none -d boot.script boot.scr # replace boot.scr sudo cp boot.scr /boot/firmware/boot.scr sudo reboot # check cmdline ubuntu@ubuntu:~$ cat /proc/cmdline coherent_pool=1M 8250.nr_uarts=1 snd_bcm2835.enable_compat_alsa=0 snd_bcm2835.enable_hdmi=1 bcm2708_fb.fbwidth=0 bcm2708_fb.fbheight=0 bcm2708_fb.fbswap=1 smsc95xx.macaddr=DC:A6:32:2E:5 4:97 vc_mem.mem_base=0x3ec00000 vc_mem.mem_size=0x40000000 net.ifnames=0 dwc_otg.lpm_enable=0 console=ttyS0,115200 console=tty1 root=LABEL=writable rootfstype=ext4 elevator=deadline roo twait fixrtc rcu_nocbs=2,3 nohz_full=2,3 isolcpus=2,3 irqaffinity=0,1 audit=0 watchdog=0 skew_tick=1 quiet splash # check interrupts # Only the number of interrupts handled by CPU 0,1 increases. watch -n1 cat /proc/interrupts # check soft interrupts watch -n1 cat /proc/softirqs # check isolated CPUs cat /sys/devices/system/cpu/isolated 2-3 cat /sys/devices/system/cpu/present 0-3 # run reference system on CPU2 taskset -c 2 install/autoware_reference_system/lib/autoware_reference_system/autoware_default_singlethreaded > /dev/null # get pid RF_PID=`pidof autoware_default_singlethreaded` && cat /proc/$RF_PID/status | grep ^Cpu # check how many threads are running ps -aL | grep $RF_PID 3835 3835 ttyS0 00:03:46 autoware_defaul 3835 3836 ttyS0 00:00:00 autoware_defaul 3835 3837 ttyS0 00:00:00 autoware_defaul 3835 3838 ttyS0 00:00:00 autoware_defaul 3835 3839 ttyS0 00:00:00 gc 3835 3840 ttyS0 00:00:00 dq.builtins 3835 3841 ttyS0 00:00:00 dq.user 3835 3842 ttyS0 00:00:00 tev 3835 3843 ttyS0 00:00:00 recv 3835 3844 ttyS0 00:00:00 recvMC 3835 3845 ttyS0 00:00:00 recvUC 3835 3846 ttyS0 00:00:00 autoware_defaul Hints If you run colcon build on a Raspberry Pi 4 with little memory, use export MAKEFLAGS=\"-j 1\" to inhibit parallelism. Otherwise, the system could hang due to memory swapping.","title":"Home"},{"location":"#the-reference-system","text":"With the distributed development of ROS across many different organizations it is sometimes hard to benchmark and concretely show how a certain change to a certain system improves or reduces the performance of that system. For example did a change from one executor to another actually reduce the CPU or was it something else entirely? The reference_system package was developed to provide the fundamental building blocks to create complex systems that then can be used to evaluate features or performance in a standardized and repeatable way. The first project to use this reference_system is the autoware_reference_system . Future reference systems could be proposed that are more complex using the same basic node building blocks within the reference_system package.","title":"The reference system"},{"location":"#defining-a-reference-system","text":"A reference system is defined by: A fixed number of nodes each node with: a fixed number of publishers and subscribers a fixed processing time or a fixed publishing rate the reference_system base package defines reusable base node types to be used in various reference systems A fixed message type of fixed size to be used for every node For simplicity and ease of benchmarking, all nodes must run on a single process Reference systems can run on what is referred to as a platform . A platform is defined by: - Hardware (e.g. an off-the-shelf single-board computer, embedded ECU, etc.) - if there are multiple configurations available for such hardware, ensure it is specified - Operating System (OS) like RT Linux, QNX, etc. along with any special configurations made With these defined attributes the reference system can be replicated across many different possible configurations to be used to benchmark each configuration against the other in a reliable and fair manner. With this approach portable and repeatable tests can also be defined to reliably confirm if a given reference system meets the requirements.","title":"Defining a reference system"},{"location":"#supported-platforms","text":"To enable as many people as possible to replicate this reference system, the platform(s) were chosen to be easily accessible (inexpensive, high volume), have lots of documentation, large community use and will be supported well into the future. Platforms were not chosen for performance of the reference system - we know we could run \u201cfaster\u201d with a more powerful CPU or GPU but then it would be harder for others to validate findings and test their own configurations. Accessibility is the key here and will be considered if more platforms want to be added to this benchmark list. Platforms: Raspberry Pi 4B : 4 GB RAM version is the assumed default other versions could also be tested / added by the community real-time Linux kernel Note: create an issue to add more platforms to the list, keeping in mind the above criteria !!! warning Each reference system can be run on other targets as well however the results will change drastically depending on the specifications of the target hardware.","title":"Supported Platforms"},{"location":"#implemented-reference-systems","text":"The first reference system benchmark proposed is based on the Autoware.Auto LiDAR data pipeline as stated above and shown in the node graph image above as well. Autoware Reference System ROS2 Executors Single Threaded Static Single Threaded Multithreaded Callback Group Prioritized Results below show various characteristics of the same simulated system (Autoware.Auto).","title":"Implemented reference systems"},{"location":"#setup-raspberry-pi-4-for-the-test","text":"The goal is to provide a clean computation environment for the test avoiding an interference of other Ubuntu components.","title":"Setup Raspberry Pi 4 for the test"},{"location":"#setup-a-constant-cpu-frequency","text":"Frequency is setup to 1.50 GHz for all CPUs # run it as root sudo su echo -n \"setup constant CPU frequency to 1.50 GHz ... \" # disable ondemand governor systemctl disable ondemand # set performance governor for all cpus echo performance | tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor >/dev/null # set constant frequency echo 1500000 | tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_min_freq >/dev/null echo 1500000 | tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_max_freq >/dev/null # reset frequency counters echo 1 | tee /sys/devices/system/cpu/cpu*/cpufreq/stats/reset >/dev/null echo done sleep 1 # get freq info echo `cpufreq-info | grep stats | cut -d ' ' -f 23-25`","title":"Setup a constant CPU frequency"},{"location":"#isolate-cpus","text":"CPU 2,3 are isolated to run tests. sudo apt install -y sysstat u-boot-tools # modify kernel cmdline cd ~ dd if=/boot/firmware/boot.scr of=boot.script bs=72 skip=1 # edit boot.script and modify bootargs to ubuntu@ubuntu:~$ cat boot.script | grep \"setenv bootargs\" | head -1 setenv bootargs \" ${bootargs} rcu_nocbs=2,3 nohz_full=2,3 isolcpus=2,3 irqaffinity=0,1 audit=0 watchdog=0 skew_tick=1 quiet splash\" # generate boot.scr mkimage -A arm64 -O linux -T script -C none -d boot.script boot.scr # replace boot.scr sudo cp boot.scr /boot/firmware/boot.scr sudo reboot # check cmdline ubuntu@ubuntu:~$ cat /proc/cmdline coherent_pool=1M 8250.nr_uarts=1 snd_bcm2835.enable_compat_alsa=0 snd_bcm2835.enable_hdmi=1 bcm2708_fb.fbwidth=0 bcm2708_fb.fbheight=0 bcm2708_fb.fbswap=1 smsc95xx.macaddr=DC:A6:32:2E:5 4:97 vc_mem.mem_base=0x3ec00000 vc_mem.mem_size=0x40000000 net.ifnames=0 dwc_otg.lpm_enable=0 console=ttyS0,115200 console=tty1 root=LABEL=writable rootfstype=ext4 elevator=deadline roo twait fixrtc rcu_nocbs=2,3 nohz_full=2,3 isolcpus=2,3 irqaffinity=0,1 audit=0 watchdog=0 skew_tick=1 quiet splash # check interrupts # Only the number of interrupts handled by CPU 0,1 increases. watch -n1 cat /proc/interrupts # check soft interrupts watch -n1 cat /proc/softirqs # check isolated CPUs cat /sys/devices/system/cpu/isolated 2-3 cat /sys/devices/system/cpu/present 0-3 # run reference system on CPU2 taskset -c 2 install/autoware_reference_system/lib/autoware_reference_system/autoware_default_singlethreaded > /dev/null # get pid RF_PID=`pidof autoware_default_singlethreaded` && cat /proc/$RF_PID/status | grep ^Cpu # check how many threads are running ps -aL | grep $RF_PID 3835 3835 ttyS0 00:03:46 autoware_defaul 3835 3836 ttyS0 00:00:00 autoware_defaul 3835 3837 ttyS0 00:00:00 autoware_defaul 3835 3838 ttyS0 00:00:00 autoware_defaul 3835 3839 ttyS0 00:00:00 gc 3835 3840 ttyS0 00:00:00 dq.builtins 3835 3841 ttyS0 00:00:00 dq.user 3835 3842 ttyS0 00:00:00 tev 3835 3843 ttyS0 00:00:00 recv 3835 3844 ttyS0 00:00:00 recvMC 3835 3845 ttyS0 00:00:00 recvUC 3835 3846 ttyS0 00:00:00 autoware_defaul","title":"Isolate CPUs"},{"location":"#hints","text":"If you run colcon build on a Raspberry Pi 4 with little memory, use export MAKEFLAGS=\"-j 1\" to inhibit parallelism. Otherwise, the system could hang due to memory swapping.","title":"Hints"},{"location":"the-autoware-reference-system/","text":"Profiling executors using the Autoware reference system Introduction This tutorial incorporates the open-sourced autoware_reference_system and can be used to fairly and repeatably test the performance of the various executors available within the greater ROS 2 community. The example simulates a real world scenario, Autoware.Auto and its LiDAR data pipeline, that can be used to evaluate the performance of the executor. To this end, the example comes with built-in performance measurements that make it easy to compare the performance between executor implementations in a repeatable way. Quick Start Some tools are provided in order to automate and standardize the report generation process for this autoware_reference_system . First, install and build the dependencies python3 -m pip install psrecord bokeh # optional dependency: networkx cd workspace colcon build --packages-up-to autoware_reference_system The easiest way to run the benchmarks is through the ctest interface. Rebuild the package with the RUN_BENCHMARK option and run colcon test : colcon build --packages-select autoware_reference_system \\ --cmake-force-configure --cmake-args -DRUN_BENCHMARK=ON colcon test --packages-select autoware_reference_system After the tests have run, reports can be found as .html files in $ROS_HOME/benchmark_autoware_reference_system/<timestamp> ( $ROS_HOME defaults to ~/.ros ). The symlink $ROS_HOME/benchmark_autoware_reference_system/latest always points to the latest results. Detailed reports to individual test runs can be found in subdirectories of the form <duration>/<middleware>/<executable> . More details on all the supported CMake arguments can be found in the supported CMake argument section below. By default the tests uses the default ROS 2 middleware set for the system. To run the tests for all available RMWs, add the -DALL_RMWS=ON CMake argument to the colcon build step. The test duration can be configured through the RUN_TIMES variable in CMakelists.txt . A separate set of tests is created for each chosen runtime. Test Results and Reports Reports are automatically generated depending on which tests are run. The main test directory ( $ROS_HOME/benchmark_autoware_reference_system/latest by default) contains the summary reports , which aggregate metrics across all tested configurations. Below this main test directory, each tested configuration has a subdirectory of the form <duration>/<middleware>/<executable name> . This directory contains the raw trace data and additional per-test reports in .html format. Tweaking the benchmark setup To get more fine-grained control over the benchmarking process invoke the benchmark script directly. To get a summary of the available options, call python3 $(ros2 pkg prefix --share autoware_reference_system)/scripts/benchmark.py --help As an example, to run all benchmarks starting with autoware_ and the autoware_default_multithreaded benchmark for 15 seconds run python3 $(ros2 pkg prefix --share autoware_reference_system)/scripts/benchmark.py \\ 15 'autoware_*' The --logdir option can be used to store the measurement results and reports in a custom directory, without adding a timestamp. Note that this may overwrite existing measurement results in the same directory. Key Performance Indicators (KPIs) The performance measurement evaluates the executor using the following metrics. In general, the lowest value within each KPI is considered to be the better performance. CPU utilization In general a lower CPU utilization is better since it enables you to choose a smaller CPU or have more functionality on a larger CPU for other things. Memory utilization In general a lower memory utilization is better since it enables you to choose a smaller memory or have more space for other things Number of dropped sensor samples in transform nodes The nodes in the reference system always use the most recent sensor data (i.e., use a history depth of 1) This is a common strategy in real-world settings, as old sensor data is much less valuable than new sensor data For example an image from 30 seconds ago is much less helpful while driving down the road than an image from 0.1 second ago Fusion nodes drop messages during normal operation if the inputs publish with different frequencies In transform nodes, however, dropped messages indicate that the transform node cannot keep up with its input Number of front LiDAR samples that did not trigger an update in the Object Collision Estimator The Front and Rear LiDARs have the same publishing frequency This means Object Collision Estimator should run for every LiDAR sample Count number of executions of Object Collision Estimator and Front LiDAR and report any difference Worst-case Latency between Front LiDAR and the Object Collision Estimator For worst-case latency we want to identify obstacles in time (i.e. early enough that we can still emergency-brake). Average Latency between Front LiDAR and Object Collision Estimator For average latency we want to identify obstacles as soon as possible so we can account for the obstacle in our planning. The Behavior Planner should be as cyclical as possible The desired behavior of the Behavior Planner is to be as cyclical as possible, meaning it should be executed as close to its set frequency of 100ms as possible Measure the jitter and drift over time of the timer callback Message Types A single message type is used for the entire reference system when generating results in order to simplify the setup as well as make it more repeatable and extensible. This means only one message type from the list below is used during any given experimental run for every node in the reference system. Message4kB reference message with a fixed size of 4 kilobytes (kB) Other messages with different fixed sizes could be added here in the future. When reporting results it is important to specify the message type used during the experiment, as the message size impacts the metrics. Autoware Reference System Built from a handful of building-block node types , each one of these nodes are meant to simulate a real-world node from the Autoware.Auto project LiDAR data pipeline. Under each node type are the requirements used for this specific reference system, autoware_reference_system . Future reference systems could have slightly different requirements and still use the same building-block node types. For simplicity, every node except for the command nodes only publishes one topic, and this topic has the same name as the node that publishes it. However, each topic can be subscribed to by multiple different nodes. Also for simplicity, every node that does processing (aka number crunching) by default is configured to do that processing for the same amount of time: roughly 10 milliseconds. This processing time varies drastically depending on what platform you are on since each node does a fixed amount of actual work, not a fixed amount of time. See the Configuring Processing Time section for more details. Message Type all nodes use the same message type during any single test run default message type: Message4kB to be implemented: Message64kB Message256kB Message512kB Message1024kB Message5120kB Sensor Nodes all sensor node have a publishing rate (cycle time) of 100 milliseconds all sensor nodes publish the same message type total of 5 sensor nodes : Front LiDAR Driver Rear LiDAR Driver Point Cloud Map Visualizer Lanelet2Map Transform Nodes all transform nodes have one subscriber and one publisher all transform nodes start processing after a message is received publishes message after processing is complete total of 10 transform nodes: Front Points Transformer Rear Points Transformer Voxel Grid Downsampler Point Cloud Map Loader Ray Ground Filter Object Collision Estimator MPC Controller Parking Planner Lane Planner Fusion Nodes all fusion nodes have two subscribers and one publisher for this reference system all fusion nodes start processing after a message is received from all subscriptions all fusion nodes have a max input time difference between the first input received and last input received before publishing of 9999 seconds publishes message after processing is complete total of 5 fusion nodes: Point Cloud Fusion NDT Localizer Vehicle Interface Lanelet2 Global Planner Lanelet 2 Map Loader Cyclic Nodes for this reference system there is only 1 cyclic node this cyclic node has 6 subscribers and one publisher this cyclic node starts processing after a message is received from any single subscription publishes message after processing is complete Command Nodes all command nodes have 1 subscriber and zero publishers all command nodes prints out the final latency statistics after a message is received on the specified topic total of 2 command nodes: VehicleDBWSystem IntersectionOutput Intersection Nodes for this reference system there is only EuclideanClusterDetector this intersection node has 2 subscribers and 2 publishers publishes message after processing is complete on the correspoding publisher Configure Processing Time Many nodes in the reference system are actually performing some pseudo-work by finding prime numbers up until some maximum value. Depending on the platform, this maximum value will need to be changed so that these nodes do not take an absurd amount of time. This maximum value should be chosen on a platform-by-platform basis so that the total run time of this work takes some desired length of time. In order to make finding this maximum value a bit easier across many different platforms a simple number_cruncher_benchmark is provided that will loop over various maximum values and spit out how long each one takes to run. After running this executable on your platform you should have a good idea what maximum value you should use in your timing configuration so that each node does some measurable work for some desired amount of time. Here is an example output of the number_cruncher_benchmark run on a typical development platform (Intel 9i7): ros2 run autoware_reference_system number_cruncher_benchmark maximum_number run time 64 0.001609ms 128 0.002896ms 256 0.006614ms 512 0.035036ms 1024 0.050957ms 2048 0.092732ms 4096 0.22837ms 8192 0.566779ms 16384 1.48837ms 32768 3.64588ms 65536 9.6687ms 131072 24.1154ms 262144 62.3475ms 524288 162.762ms 1048576 429.882ms 2097152 1149.79ms Run the above command on your system, select your desired run_time and place the corresponding maximum_number in the timing configuration file for the desired nodes. Supported CMake Arguments RUN_BENCHMARK Tell CMake to build the benchmark tests that will check the reference system against its requirements before running a sweep of tests to generate trace files and reports Without the RUN_BENCHMARK variable set to ON only the standard linter tests will be run TEST_PLATFORM Test CMake to build the tests to check if the tests are being run from a supported platform or not This flag can be omitted if you would like to run the tests on a development system before running them on a supported platform The platform tests themselves can and should be improved going forward and are only some simple checks today (architecture, number of CPUs, PREEMPT_RT flag, etc.) Set this to ON to check if the current platform is supported SKIP_TRACING Set to ON to skip the ros2_tracing tests, aka the callback tests This can greatly reduce the length of time the colcon test command takes to run ALL_RMWS Set this to ON if you'd like to run tests on all available RMWs as well Otherwise use only default RMW (first one listed by CMake function get_available_rmw_implementations ) Defaults to OFF Generating Node Graph Image To generate the image shown above you can take advantage of a program called graphviz that has a command line interface (CLI) command dot . First, check out the provided .dot file to get an idea of how the dot syntax works (feel free to modify it for your use case or future reference systems ). To generate the .dot file into an .svg image, run the following command: dot -Tsvg autoware_reference_system.dot Note: you can change the generated image type to any of the supported type parameters if you would like a different filetype. Available benchmarks The package comes with a set of benchmark executables. Many of these benchmarks distinguish hotpath nodes from other nodes; these are the nodes involved in the latency KPI, starting with the front/rear LiDAR and ending in the ObjectCollisionEstimator. Within the hotpath nodes, the benchmarks further distinguish between front/rear LiDAR nodes (the LidarDriver and PointsTransformer in front/rear, respectively) and the fusion chain nodes (everything from PointCloudFusion to ObjectCollisionEstimator). Some benchmarks use real-time priorities and affinities. In this case, hotpath nodes run at priority 1 on cores 1-3; the planner nodes runs at priority 30 on core 0; and all other nodes run without real-time priority on all cores. ROS 2 benchmarks autoware_default_singlethreaded : All nodes are assigned to the same single-threaded ROS executor autoware_default_multithreaded : All nodes are assigned to the same multi-threaded ROS executor autoware_default_staticsinglethreaded : Like autoware_default_singlethreaded , but using the StaticSingleThreadedExecutor . autoware_default_prioritized : Separate executors for front LiDAR nodes, rear LiDAR nodes fusion chain nodes, behavior planner, and everything else. Uses real-time priorities. autoware_default_cbg : Like autoware_default_prioritized , but uses the callback-group executor to remove the non-hotpath subscription in EuclideanClusterDetector from the executor for fusion chain nodes.","title":"Autoware Reference System"},{"location":"the-autoware-reference-system/#profiling-executors-using-the-autoware-reference-system","text":"","title":"Profiling executors using the Autoware reference system"},{"location":"the-autoware-reference-system/#introduction","text":"This tutorial incorporates the open-sourced autoware_reference_system and can be used to fairly and repeatably test the performance of the various executors available within the greater ROS 2 community. The example simulates a real world scenario, Autoware.Auto and its LiDAR data pipeline, that can be used to evaluate the performance of the executor. To this end, the example comes with built-in performance measurements that make it easy to compare the performance between executor implementations in a repeatable way.","title":"Introduction"},{"location":"the-autoware-reference-system/#quick-start","text":"Some tools are provided in order to automate and standardize the report generation process for this autoware_reference_system . First, install and build the dependencies python3 -m pip install psrecord bokeh # optional dependency: networkx cd workspace colcon build --packages-up-to autoware_reference_system The easiest way to run the benchmarks is through the ctest interface. Rebuild the package with the RUN_BENCHMARK option and run colcon test : colcon build --packages-select autoware_reference_system \\ --cmake-force-configure --cmake-args -DRUN_BENCHMARK=ON colcon test --packages-select autoware_reference_system After the tests have run, reports can be found as .html files in $ROS_HOME/benchmark_autoware_reference_system/<timestamp> ( $ROS_HOME defaults to ~/.ros ). The symlink $ROS_HOME/benchmark_autoware_reference_system/latest always points to the latest results. Detailed reports to individual test runs can be found in subdirectories of the form <duration>/<middleware>/<executable> . More details on all the supported CMake arguments can be found in the supported CMake argument section below. By default the tests uses the default ROS 2 middleware set for the system. To run the tests for all available RMWs, add the -DALL_RMWS=ON CMake argument to the colcon build step. The test duration can be configured through the RUN_TIMES variable in CMakelists.txt . A separate set of tests is created for each chosen runtime.","title":"Quick Start"},{"location":"the-autoware-reference-system/#test-results-and-reports","text":"Reports are automatically generated depending on which tests are run. The main test directory ( $ROS_HOME/benchmark_autoware_reference_system/latest by default) contains the summary reports , which aggregate metrics across all tested configurations. Below this main test directory, each tested configuration has a subdirectory of the form <duration>/<middleware>/<executable name> . This directory contains the raw trace data and additional per-test reports in .html format.","title":"Test Results and Reports"},{"location":"the-autoware-reference-system/#tweaking-the-benchmark-setup","text":"To get more fine-grained control over the benchmarking process invoke the benchmark script directly. To get a summary of the available options, call python3 $(ros2 pkg prefix --share autoware_reference_system)/scripts/benchmark.py --help As an example, to run all benchmarks starting with autoware_ and the autoware_default_multithreaded benchmark for 15 seconds run python3 $(ros2 pkg prefix --share autoware_reference_system)/scripts/benchmark.py \\ 15 'autoware_*' The --logdir option can be used to store the measurement results and reports in a custom directory, without adding a timestamp. Note that this may overwrite existing measurement results in the same directory.","title":"Tweaking the benchmark setup"},{"location":"the-autoware-reference-system/#key-performance-indicators-kpis","text":"The performance measurement evaluates the executor using the following metrics. In general, the lowest value within each KPI is considered to be the better performance. CPU utilization In general a lower CPU utilization is better since it enables you to choose a smaller CPU or have more functionality on a larger CPU for other things. Memory utilization In general a lower memory utilization is better since it enables you to choose a smaller memory or have more space for other things Number of dropped sensor samples in transform nodes The nodes in the reference system always use the most recent sensor data (i.e., use a history depth of 1) This is a common strategy in real-world settings, as old sensor data is much less valuable than new sensor data For example an image from 30 seconds ago is much less helpful while driving down the road than an image from 0.1 second ago Fusion nodes drop messages during normal operation if the inputs publish with different frequencies In transform nodes, however, dropped messages indicate that the transform node cannot keep up with its input Number of front LiDAR samples that did not trigger an update in the Object Collision Estimator The Front and Rear LiDARs have the same publishing frequency This means Object Collision Estimator should run for every LiDAR sample Count number of executions of Object Collision Estimator and Front LiDAR and report any difference Worst-case Latency between Front LiDAR and the Object Collision Estimator For worst-case latency we want to identify obstacles in time (i.e. early enough that we can still emergency-brake). Average Latency between Front LiDAR and Object Collision Estimator For average latency we want to identify obstacles as soon as possible so we can account for the obstacle in our planning. The Behavior Planner should be as cyclical as possible The desired behavior of the Behavior Planner is to be as cyclical as possible, meaning it should be executed as close to its set frequency of 100ms as possible Measure the jitter and drift over time of the timer callback","title":"Key Performance Indicators (KPIs)"},{"location":"the-autoware-reference-system/#message-types","text":"A single message type is used for the entire reference system when generating results in order to simplify the setup as well as make it more repeatable and extensible. This means only one message type from the list below is used during any given experimental run for every node in the reference system. Message4kB reference message with a fixed size of 4 kilobytes (kB) Other messages with different fixed sizes could be added here in the future. When reporting results it is important to specify the message type used during the experiment, as the message size impacts the metrics.","title":"Message Types"},{"location":"the-autoware-reference-system/#autoware-reference-system","text":"Built from a handful of building-block node types , each one of these nodes are meant to simulate a real-world node from the Autoware.Auto project LiDAR data pipeline. Under each node type are the requirements used for this specific reference system, autoware_reference_system . Future reference systems could have slightly different requirements and still use the same building-block node types. For simplicity, every node except for the command nodes only publishes one topic, and this topic has the same name as the node that publishes it. However, each topic can be subscribed to by multiple different nodes. Also for simplicity, every node that does processing (aka number crunching) by default is configured to do that processing for the same amount of time: roughly 10 milliseconds. This processing time varies drastically depending on what platform you are on since each node does a fixed amount of actual work, not a fixed amount of time. See the Configuring Processing Time section for more details. Message Type all nodes use the same message type during any single test run default message type: Message4kB to be implemented: Message64kB Message256kB Message512kB Message1024kB Message5120kB Sensor Nodes all sensor node have a publishing rate (cycle time) of 100 milliseconds all sensor nodes publish the same message type total of 5 sensor nodes : Front LiDAR Driver Rear LiDAR Driver Point Cloud Map Visualizer Lanelet2Map Transform Nodes all transform nodes have one subscriber and one publisher all transform nodes start processing after a message is received publishes message after processing is complete total of 10 transform nodes: Front Points Transformer Rear Points Transformer Voxel Grid Downsampler Point Cloud Map Loader Ray Ground Filter Object Collision Estimator MPC Controller Parking Planner Lane Planner Fusion Nodes all fusion nodes have two subscribers and one publisher for this reference system all fusion nodes start processing after a message is received from all subscriptions all fusion nodes have a max input time difference between the first input received and last input received before publishing of 9999 seconds publishes message after processing is complete total of 5 fusion nodes: Point Cloud Fusion NDT Localizer Vehicle Interface Lanelet2 Global Planner Lanelet 2 Map Loader Cyclic Nodes for this reference system there is only 1 cyclic node this cyclic node has 6 subscribers and one publisher this cyclic node starts processing after a message is received from any single subscription publishes message after processing is complete Command Nodes all command nodes have 1 subscriber and zero publishers all command nodes prints out the final latency statistics after a message is received on the specified topic total of 2 command nodes: VehicleDBWSystem IntersectionOutput Intersection Nodes for this reference system there is only EuclideanClusterDetector this intersection node has 2 subscribers and 2 publishers publishes message after processing is complete on the correspoding publisher","title":"Autoware Reference System"},{"location":"the-autoware-reference-system/#configure-processing-time","text":"Many nodes in the reference system are actually performing some pseudo-work by finding prime numbers up until some maximum value. Depending on the platform, this maximum value will need to be changed so that these nodes do not take an absurd amount of time. This maximum value should be chosen on a platform-by-platform basis so that the total run time of this work takes some desired length of time. In order to make finding this maximum value a bit easier across many different platforms a simple number_cruncher_benchmark is provided that will loop over various maximum values and spit out how long each one takes to run. After running this executable on your platform you should have a good idea what maximum value you should use in your timing configuration so that each node does some measurable work for some desired amount of time. Here is an example output of the number_cruncher_benchmark run on a typical development platform (Intel 9i7): ros2 run autoware_reference_system number_cruncher_benchmark maximum_number run time 64 0.001609ms 128 0.002896ms 256 0.006614ms 512 0.035036ms 1024 0.050957ms 2048 0.092732ms 4096 0.22837ms 8192 0.566779ms 16384 1.48837ms 32768 3.64588ms 65536 9.6687ms 131072 24.1154ms 262144 62.3475ms 524288 162.762ms 1048576 429.882ms 2097152 1149.79ms Run the above command on your system, select your desired run_time and place the corresponding maximum_number in the timing configuration file for the desired nodes.","title":"Configure Processing Time"},{"location":"the-autoware-reference-system/#supported-cmake-arguments","text":"RUN_BENCHMARK Tell CMake to build the benchmark tests that will check the reference system against its requirements before running a sweep of tests to generate trace files and reports Without the RUN_BENCHMARK variable set to ON only the standard linter tests will be run TEST_PLATFORM Test CMake to build the tests to check if the tests are being run from a supported platform or not This flag can be omitted if you would like to run the tests on a development system before running them on a supported platform The platform tests themselves can and should be improved going forward and are only some simple checks today (architecture, number of CPUs, PREEMPT_RT flag, etc.) Set this to ON to check if the current platform is supported SKIP_TRACING Set to ON to skip the ros2_tracing tests, aka the callback tests This can greatly reduce the length of time the colcon test command takes to run ALL_RMWS Set this to ON if you'd like to run tests on all available RMWs as well Otherwise use only default RMW (first one listed by CMake function get_available_rmw_implementations ) Defaults to OFF","title":"Supported CMake Arguments"},{"location":"the-autoware-reference-system/#generating-node-graph-image","text":"To generate the image shown above you can take advantage of a program called graphviz that has a command line interface (CLI) command dot . First, check out the provided .dot file to get an idea of how the dot syntax works (feel free to modify it for your use case or future reference systems ). To generate the .dot file into an .svg image, run the following command: dot -Tsvg autoware_reference_system.dot Note: you can change the generated image type to any of the supported type parameters if you would like a different filetype.","title":"Generating Node Graph Image"},{"location":"the-autoware-reference-system/#available-benchmarks","text":"The package comes with a set of benchmark executables. Many of these benchmarks distinguish hotpath nodes from other nodes; these are the nodes involved in the latency KPI, starting with the front/rear LiDAR and ending in the ObjectCollisionEstimator. Within the hotpath nodes, the benchmarks further distinguish between front/rear LiDAR nodes (the LidarDriver and PointsTransformer in front/rear, respectively) and the fusion chain nodes (everything from PointCloudFusion to ObjectCollisionEstimator). Some benchmarks use real-time priorities and affinities. In this case, hotpath nodes run at priority 1 on cores 1-3; the planner nodes runs at priority 30 on core 0; and all other nodes run without real-time priority on all cores.","title":"Available benchmarks"},{"location":"the-autoware-reference-system/#ros-2-benchmarks","text":"autoware_default_singlethreaded : All nodes are assigned to the same single-threaded ROS executor autoware_default_multithreaded : All nodes are assigned to the same multi-threaded ROS executor autoware_default_staticsinglethreaded : Like autoware_default_singlethreaded , but using the StaticSingleThreadedExecutor . autoware_default_prioritized : Separate executors for front LiDAR nodes, rear LiDAR nodes fusion chain nodes, behavior planner, and everything else. Uses real-time priorities. autoware_default_cbg : Like autoware_default_prioritized , but uses the callback-group executor to remove the non-hotpath subscription in EuclideanClusterDetector from the executor for fusion chain nodes.","title":"ROS 2 benchmarks"},{"location":"the-reference-system/","text":"The reference_system package The reference_system package provides reusable base components (nodes) that allow users to construct any number of \"reference systems\" to replicate real-world scenarios on real-world hardware. The purpose of these components are not to provide the most efficient way of writing a node but rather a reusable and repeatible way of writing a node so that it can be used to reliably test various key performance indicators later on. Base node types Most real-world systems can be boiled down to only a handful of base node \"types\" that are then repeated to make the real-world system. This does not cover all possible node types, however it allows for numerous complicated systems to be developed using the same base building blocks. Sensor Node input node to system one publisher, zero subscribers publishes message cyclically at some fixed frequency Transform Node one subscriber, one publisher starts processing for N milliseconds after a message is received publishes message after processing is complete Fusion Node 2 subscribers, one publisher starts processing for N milliseconds after a message is received from all subscriptions publishes message after processing is complete Cyclic Node N subscribers, one publisher cyclically processes all received messages since the last cycle for N milliseconds publishes message after processing is complete Command Node prints output stats everytime a message is received Intersection Node behaves like N transform nodes N subscribers, N publisher bundled together in one-to-one connections starts processing on connection where sample was received publishes message after processing is complete These basic building-block nodes can be mixed-and-matched to create quite complex systems that replicate real-world scenarios to benchmark different configurations against each other. New base node types can be added if necessary. Testing and Dependencies Common benchmarking scripts are provided within the reference_system/reference_system_py directory which is a python module itself. The methods and tools provided there can assist with running standardized benchmarking tests and with generating reports as well. See the autoware_reference_system for an example Unit and integration tests have also been written for the reference_system package and can be found within the test directory . If a new system type is to be added, new unit and integration tests should also be added as well.","title":"Reference System"},{"location":"the-reference-system/#the-reference_system-package","text":"The reference_system package provides reusable base components (nodes) that allow users to construct any number of \"reference systems\" to replicate real-world scenarios on real-world hardware. The purpose of these components are not to provide the most efficient way of writing a node but rather a reusable and repeatible way of writing a node so that it can be used to reliably test various key performance indicators later on.","title":"The reference_system package"},{"location":"the-reference-system/#base-node-types","text":"Most real-world systems can be boiled down to only a handful of base node \"types\" that are then repeated to make the real-world system. This does not cover all possible node types, however it allows for numerous complicated systems to be developed using the same base building blocks. Sensor Node input node to system one publisher, zero subscribers publishes message cyclically at some fixed frequency Transform Node one subscriber, one publisher starts processing for N milliseconds after a message is received publishes message after processing is complete Fusion Node 2 subscribers, one publisher starts processing for N milliseconds after a message is received from all subscriptions publishes message after processing is complete Cyclic Node N subscribers, one publisher cyclically processes all received messages since the last cycle for N milliseconds publishes message after processing is complete Command Node prints output stats everytime a message is received Intersection Node behaves like N transform nodes N subscribers, N publisher bundled together in one-to-one connections starts processing on connection where sample was received publishes message after processing is complete These basic building-block nodes can be mixed-and-matched to create quite complex systems that replicate real-world scenarios to benchmark different configurations against each other. New base node types can be added if necessary.","title":"Base node types"},{"location":"the-reference-system/#testing-and-dependencies","text":"Common benchmarking scripts are provided within the reference_system/reference_system_py directory which is a python module itself. The methods and tools provided there can assist with running standardized benchmarking tests and with generating reports as well. See the autoware_reference_system for an example Unit and integration tests have also been written for the reference_system package and can be found within the test directory . If a new system type is to be added, new unit and integration tests should also be added as well.","title":"Testing and Dependencies"},{"location":"api-reference/Classes/","text":"Classes struct RclcppSystem class SampleManagementSettings A singleton for sample management settings that may differ between experiments. class TestNodeGraph namespace benchmark namespace conftest namespace nodes struct CommandSettings struct CyclicSettings struct FusionSettings struct IntersectionSettings struct Connection struct PeriodicSensorSettings struct SensorSettings struct TransformSettings namespace rclcpp_system class Command class Cyclic struct subscription_t class Fusion struct subscription_t class Intersection struct Connection class Sensor class Transform namespace timing struct BenchmarkCPUUsage struct BenchmarkThroughput struct Default namespace rclcpp namespace reference_interfaces namespace msg struct Message4kb namespace Message4kb_Constants struct TransmissionStats namespace TransmissionStats_Constants namespace reference_system_py namespace benchmark namespace callback_duration namespace constants namespace dropped_messages namespace memory_usage namespace plot_utils namespace report namespace std_latency namespace trace_utils struct sample_statistic_t namespace setup struct statistic_value_t namespace std::chrono_literals namespace test_platform namespace test_requirements class TestRequirementsAutowareReferenceSystem namespace testing namespace unittest Updated on 2024-10-24 at 09:15:15 +0000","title":"Classes"},{"location":"api-reference/Classes/#classes","text":"struct RclcppSystem class SampleManagementSettings A singleton for sample management settings that may differ between experiments. class TestNodeGraph namespace benchmark namespace conftest namespace nodes struct CommandSettings struct CyclicSettings struct FusionSettings struct IntersectionSettings struct Connection struct PeriodicSensorSettings struct SensorSettings struct TransformSettings namespace rclcpp_system class Command class Cyclic struct subscription_t class Fusion struct subscription_t class Intersection struct Connection class Sensor class Transform namespace timing struct BenchmarkCPUUsage struct BenchmarkThroughput struct Default namespace rclcpp namespace reference_interfaces namespace msg struct Message4kb namespace Message4kb_Constants struct TransmissionStats namespace TransmissionStats_Constants namespace reference_system_py namespace benchmark namespace callback_duration namespace constants namespace dropped_messages namespace memory_usage namespace plot_utils namespace report namespace std_latency namespace trace_utils struct sample_statistic_t namespace setup struct statistic_value_t namespace std::chrono_literals namespace test_platform namespace test_requirements class TestRequirementsAutowareReferenceSystem namespace testing namespace unittest Updated on 2024-10-24 at 09:15:15 +0000","title":"Classes"},{"location":"api-reference/Classes/classSampleManagementSettings/","text":"SampleManagementSettings A singleton for sample management settings that may differ between experiments. #include <sample_management.hpp> Public Functions Name void set_hot_path (const std::set< std::string > & hot_path_nodes, const std::set< std::string > & hot_path_roots, const std::string & hot_path_sink) void set_benchmark_mode (bool value) bool is_in_benchmark_mode () const bool is_hot_path_root (const std::string & name) const bool is_hot_path_node (const std::string & name) const const std::string & hot_path_sink () const std::string hot_path_name () const SampleManagementSettings & get () Public Functions Documentation function set_hot_path inline void set_hot_path( const std::set< std::string > & hot_path_nodes, const std::set< std::string > & hot_path_roots, const std::string & hot_path_sink ) function set_benchmark_mode inline void set_benchmark_mode( bool value ) function is_in_benchmark_mode inline bool is_in_benchmark_mode() const function is_hot_path_root inline bool is_hot_path_root( const std::string & name ) const function is_hot_path_node inline bool is_hot_path_node( const std::string & name ) const function hot_path_sink inline const std::string & hot_path_sink() const function hot_path_name inline std::string hot_path_name() const function get static inline SampleManagementSettings & get() Updated on 2024-10-24 at 09:15:15 +0000","title":"SampleManagementSettings"},{"location":"api-reference/Classes/classSampleManagementSettings/#samplemanagementsettings","text":"A singleton for sample management settings that may differ between experiments. #include <sample_management.hpp>","title":"SampleManagementSettings"},{"location":"api-reference/Classes/classSampleManagementSettings/#public-functions","text":"Name void set_hot_path (const std::set< std::string > & hot_path_nodes, const std::set< std::string > & hot_path_roots, const std::string & hot_path_sink) void set_benchmark_mode (bool value) bool is_in_benchmark_mode () const bool is_hot_path_root (const std::string & name) const bool is_hot_path_node (const std::string & name) const const std::string & hot_path_sink () const std::string hot_path_name () const SampleManagementSettings & get ()","title":"Public Functions"},{"location":"api-reference/Classes/classSampleManagementSettings/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api-reference/Classes/classSampleManagementSettings/#function-set_hot_path","text":"inline void set_hot_path( const std::set< std::string > & hot_path_nodes, const std::set< std::string > & hot_path_roots, const std::string & hot_path_sink )","title":"function set_hot_path"},{"location":"api-reference/Classes/classSampleManagementSettings/#function-set_benchmark_mode","text":"inline void set_benchmark_mode( bool value )","title":"function set_benchmark_mode"},{"location":"api-reference/Classes/classSampleManagementSettings/#function-is_in_benchmark_mode","text":"inline bool is_in_benchmark_mode() const","title":"function is_in_benchmark_mode"},{"location":"api-reference/Classes/classSampleManagementSettings/#function-is_hot_path_root","text":"inline bool is_hot_path_root( const std::string & name ) const","title":"function is_hot_path_root"},{"location":"api-reference/Classes/classSampleManagementSettings/#function-is_hot_path_node","text":"inline bool is_hot_path_node( const std::string & name ) const","title":"function is_hot_path_node"},{"location":"api-reference/Classes/classSampleManagementSettings/#function-hot_path_sink","text":"inline const std::string & hot_path_sink() const","title":"function hot_path_sink"},{"location":"api-reference/Classes/classSampleManagementSettings/#function-hot_path_name","text":"inline std::string hot_path_name() const","title":"function hot_path_name"},{"location":"api-reference/Classes/classSampleManagementSettings/#function-get","text":"static inline SampleManagementSettings & get() Updated on 2024-10-24 at 09:15:15 +0000","title":"function get"},{"location":"api-reference/Classes/classTestNodeGraph/","text":"TestNodeGraph Inherits from testing::Test Public Functions Name void TearDown () void SetUp () Public Functions Documentation function TearDown inline void TearDown() function SetUp inline void SetUp() Updated on 2024-10-24 at 09:15:15 +0000","title":"TestNodeGraph"},{"location":"api-reference/Classes/classTestNodeGraph/#testnodegraph","text":"Inherits from testing::Test","title":"TestNodeGraph"},{"location":"api-reference/Classes/classTestNodeGraph/#public-functions","text":"Name void TearDown () void SetUp ()","title":"Public Functions"},{"location":"api-reference/Classes/classTestNodeGraph/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api-reference/Classes/classTestNodeGraph/#function-teardown","text":"inline void TearDown()","title":"function TearDown"},{"location":"api-reference/Classes/classTestNodeGraph/#function-setup","text":"inline void SetUp() Updated on 2024-10-24 at 09:15:15 +0000","title":"function SetUp"},{"location":"api-reference/Classes/classnodes_1_1rclcpp__system_1_1Command/","text":"nodes::rclcpp_system::Command Inherits from rclcpp::Node Public Functions Name Command (const CommandSettings & settings) Public Functions Documentation function Command inline explicit Command( const CommandSettings & settings ) Updated on 2024-10-24 at 09:15:15 +0000","title":"nodes::rclcpp_system::Command"},{"location":"api-reference/Classes/classnodes_1_1rclcpp__system_1_1Command/#nodesrclcpp_systemcommand","text":"Inherits from rclcpp::Node","title":"nodes::rclcpp_system::Command"},{"location":"api-reference/Classes/classnodes_1_1rclcpp__system_1_1Command/#public-functions","text":"Name Command (const CommandSettings & settings)","title":"Public Functions"},{"location":"api-reference/Classes/classnodes_1_1rclcpp__system_1_1Command/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api-reference/Classes/classnodes_1_1rclcpp__system_1_1Command/#function-command","text":"inline explicit Command( const CommandSettings & settings ) Updated on 2024-10-24 at 09:15:15 +0000","title":"function Command"},{"location":"api-reference/Classes/classnodes_1_1rclcpp__system_1_1Cyclic/","text":"nodes::rclcpp_system::Cyclic Inherits from rclcpp::Node Public Functions Name Cyclic (const CyclicSettings & settings) Public Functions Documentation function Cyclic inline explicit Cyclic( const CyclicSettings & settings ) Updated on 2024-10-24 at 09:15:15 +0000","title":"nodes::rclcpp_system::Cyclic"},{"location":"api-reference/Classes/classnodes_1_1rclcpp__system_1_1Cyclic/#nodesrclcpp_systemcyclic","text":"Inherits from rclcpp::Node","title":"nodes::rclcpp_system::Cyclic"},{"location":"api-reference/Classes/classnodes_1_1rclcpp__system_1_1Cyclic/#public-functions","text":"Name Cyclic (const CyclicSettings & settings)","title":"Public Functions"},{"location":"api-reference/Classes/classnodes_1_1rclcpp__system_1_1Cyclic/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api-reference/Classes/classnodes_1_1rclcpp__system_1_1Cyclic/#function-cyclic","text":"inline explicit Cyclic( const CyclicSettings & settings ) Updated on 2024-10-24 at 09:15:15 +0000","title":"function Cyclic"},{"location":"api-reference/Classes/classnodes_1_1rclcpp__system_1_1Fusion/","text":"nodes::rclcpp_system::Fusion Inherits from rclcpp::Node Public Functions Name Fusion (const FusionSettings & settings) Public Functions Documentation function Fusion inline explicit Fusion( const FusionSettings & settings ) Updated on 2024-10-24 at 09:15:15 +0000","title":"nodes::rclcpp_system::Fusion"},{"location":"api-reference/Classes/classnodes_1_1rclcpp__system_1_1Fusion/#nodesrclcpp_systemfusion","text":"Inherits from rclcpp::Node","title":"nodes::rclcpp_system::Fusion"},{"location":"api-reference/Classes/classnodes_1_1rclcpp__system_1_1Fusion/#public-functions","text":"Name Fusion (const FusionSettings & settings)","title":"Public Functions"},{"location":"api-reference/Classes/classnodes_1_1rclcpp__system_1_1Fusion/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api-reference/Classes/classnodes_1_1rclcpp__system_1_1Fusion/#function-fusion","text":"inline explicit Fusion( const FusionSettings & settings ) Updated on 2024-10-24 at 09:15:15 +0000","title":"function Fusion"},{"location":"api-reference/Classes/classnodes_1_1rclcpp__system_1_1Intersection/","text":"nodes::rclcpp_system::Intersection Inherits from rclcpp::Node Public Functions Name rclcpp::CallbackGroup::SharedPtr get_callback_group_of_subscription (const std::string & input_topic) Intersection (const IntersectionSettings & settings) Public Functions Documentation function get_callback_group_of_subscription inline rclcpp::CallbackGroup::SharedPtr get_callback_group_of_subscription( const std::string & input_topic ) function Intersection inline explicit Intersection( const IntersectionSettings & settings ) Updated on 2024-10-24 at 09:15:15 +0000","title":"nodes::rclcpp_system::Intersection"},{"location":"api-reference/Classes/classnodes_1_1rclcpp__system_1_1Intersection/#nodesrclcpp_systemintersection","text":"Inherits from rclcpp::Node","title":"nodes::rclcpp_system::Intersection"},{"location":"api-reference/Classes/classnodes_1_1rclcpp__system_1_1Intersection/#public-functions","text":"Name rclcpp::CallbackGroup::SharedPtr get_callback_group_of_subscription (const std::string & input_topic) Intersection (const IntersectionSettings & settings)","title":"Public Functions"},{"location":"api-reference/Classes/classnodes_1_1rclcpp__system_1_1Intersection/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api-reference/Classes/classnodes_1_1rclcpp__system_1_1Intersection/#function-get_callback_group_of_subscription","text":"inline rclcpp::CallbackGroup::SharedPtr get_callback_group_of_subscription( const std::string & input_topic )","title":"function get_callback_group_of_subscription"},{"location":"api-reference/Classes/classnodes_1_1rclcpp__system_1_1Intersection/#function-intersection","text":"inline explicit Intersection( const IntersectionSettings & settings ) Updated on 2024-10-24 at 09:15:15 +0000","title":"function Intersection"},{"location":"api-reference/Classes/classnodes_1_1rclcpp__system_1_1Sensor/","text":"nodes::rclcpp_system::Sensor Inherits from rclcpp::Node Public Functions Name Sensor (const SensorSettings & settings) Public Functions Documentation function Sensor inline explicit Sensor( const SensorSettings & settings ) Updated on 2024-10-24 at 09:15:15 +0000","title":"nodes::rclcpp_system::Sensor"},{"location":"api-reference/Classes/classnodes_1_1rclcpp__system_1_1Sensor/#nodesrclcpp_systemsensor","text":"Inherits from rclcpp::Node","title":"nodes::rclcpp_system::Sensor"},{"location":"api-reference/Classes/classnodes_1_1rclcpp__system_1_1Sensor/#public-functions","text":"Name Sensor (const SensorSettings & settings)","title":"Public Functions"},{"location":"api-reference/Classes/classnodes_1_1rclcpp__system_1_1Sensor/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api-reference/Classes/classnodes_1_1rclcpp__system_1_1Sensor/#function-sensor","text":"inline explicit Sensor( const SensorSettings & settings ) Updated on 2024-10-24 at 09:15:15 +0000","title":"function Sensor"},{"location":"api-reference/Classes/classnodes_1_1rclcpp__system_1_1Transform/","text":"nodes::rclcpp_system::Transform Inherits from rclcpp::Node Public Functions Name Transform (const TransformSettings & settings) Public Functions Documentation function Transform inline explicit Transform( const TransformSettings & settings ) Updated on 2024-10-24 at 09:15:15 +0000","title":"nodes::rclcpp_system::Transform"},{"location":"api-reference/Classes/classnodes_1_1rclcpp__system_1_1Transform/#nodesrclcpp_systemtransform","text":"Inherits from rclcpp::Node","title":"nodes::rclcpp_system::Transform"},{"location":"api-reference/Classes/classnodes_1_1rclcpp__system_1_1Transform/#public-functions","text":"Name Transform (const TransformSettings & settings)","title":"Public Functions"},{"location":"api-reference/Classes/classnodes_1_1rclcpp__system_1_1Transform/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api-reference/Classes/classnodes_1_1rclcpp__system_1_1Transform/#function-transform","text":"inline explicit Transform( const TransformSettings & settings ) Updated on 2024-10-24 at 09:15:15 +0000","title":"function Transform"},{"location":"api-reference/Classes/classtest__requirements_1_1TestRequirementsAutowareReferenceSystem/","text":"test_requirements::TestRequirementsAutowareReferenceSystem Inherits from unittest.TestCase Public Functions Name test_pubs_and_subs (self self) Public Functions Documentation function test_pubs_and_subs test_pubs_and_subs( self self ) Updated on 2024-10-24 at 09:15:15 +0000","title":"test_requirements::TestRequirementsAutowareReferenceSystem"},{"location":"api-reference/Classes/classtest__requirements_1_1TestRequirementsAutowareReferenceSystem/#test_requirementstestrequirementsautowarereferencesystem","text":"Inherits from unittest.TestCase","title":"test_requirements::TestRequirementsAutowareReferenceSystem"},{"location":"api-reference/Classes/classtest__requirements_1_1TestRequirementsAutowareReferenceSystem/#public-functions","text":"Name test_pubs_and_subs (self self)","title":"Public Functions"},{"location":"api-reference/Classes/classtest__requirements_1_1TestRequirementsAutowareReferenceSystem/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api-reference/Classes/classtest__requirements_1_1TestRequirementsAutowareReferenceSystem/#function-test_pubs_and_subs","text":"test_pubs_and_subs( self self ) Updated on 2024-10-24 at 09:15:15 +0000","title":"function test_pubs_and_subs"},{"location":"api-reference/Classes/structRclcppSystem/","text":"RclcppSystem Public Types Name using nodes::rclcpp_system::Transform Transform using nodes::rclcpp_system::Sensor Sensor using rclcpp::Node NodeBaseType using nodes::rclcpp_system::Intersection Intersection using nodes::rclcpp_system::Fusion Fusion using nodes::rclcpp_system::Cyclic Cyclic using nodes::rclcpp_system::Command Command Public Types Documentation using Transform using RclcppSystem::Transform = nodes::rclcpp_system::Transform; using Sensor using RclcppSystem::Sensor = nodes::rclcpp_system::Sensor; using NodeBaseType using RclcppSystem::NodeBaseType = rclcpp::Node; using Intersection using RclcppSystem::Intersection = nodes::rclcpp_system::Intersection; using Fusion using RclcppSystem::Fusion = nodes::rclcpp_system::Fusion; using Cyclic using RclcppSystem::Cyclic = nodes::rclcpp_system::Cyclic; using Command using RclcppSystem::Command = nodes::rclcpp_system::Command; Updated on 2024-10-24 at 09:15:15 +0000","title":"RclcppSystem"},{"location":"api-reference/Classes/structRclcppSystem/#rclcppsystem","text":"","title":"RclcppSystem"},{"location":"api-reference/Classes/structRclcppSystem/#public-types","text":"Name using nodes::rclcpp_system::Transform Transform using nodes::rclcpp_system::Sensor Sensor using rclcpp::Node NodeBaseType using nodes::rclcpp_system::Intersection Intersection using nodes::rclcpp_system::Fusion Fusion using nodes::rclcpp_system::Cyclic Cyclic using nodes::rclcpp_system::Command Command","title":"Public Types"},{"location":"api-reference/Classes/structRclcppSystem/#public-types-documentation","text":"","title":"Public Types Documentation"},{"location":"api-reference/Classes/structRclcppSystem/#using-transform","text":"using RclcppSystem::Transform = nodes::rclcpp_system::Transform;","title":"using Transform"},{"location":"api-reference/Classes/structRclcppSystem/#using-sensor","text":"using RclcppSystem::Sensor = nodes::rclcpp_system::Sensor;","title":"using Sensor"},{"location":"api-reference/Classes/structRclcppSystem/#using-nodebasetype","text":"using RclcppSystem::NodeBaseType = rclcpp::Node;","title":"using NodeBaseType"},{"location":"api-reference/Classes/structRclcppSystem/#using-intersection","text":"using RclcppSystem::Intersection = nodes::rclcpp_system::Intersection;","title":"using Intersection"},{"location":"api-reference/Classes/structRclcppSystem/#using-fusion","text":"using RclcppSystem::Fusion = nodes::rclcpp_system::Fusion;","title":"using Fusion"},{"location":"api-reference/Classes/structRclcppSystem/#using-cyclic","text":"using RclcppSystem::Cyclic = nodes::rclcpp_system::Cyclic;","title":"using Cyclic"},{"location":"api-reference/Classes/structRclcppSystem/#using-command","text":"using RclcppSystem::Command = nodes::rclcpp_system::Command; Updated on 2024-10-24 at 09:15:15 +0000","title":"using Command"},{"location":"api-reference/Classes/structnodes_1_1CommandSettings/","text":"nodes::CommandSettings Public Attributes Name std::string node_name std::string input_topic Public Attributes Documentation variable node_name std::string node_name; variable input_topic std::string input_topic; Updated on 2024-10-24 at 09:15:15 +0000","title":"nodes::CommandSettings"},{"location":"api-reference/Classes/structnodes_1_1CommandSettings/#nodescommandsettings","text":"","title":"nodes::CommandSettings"},{"location":"api-reference/Classes/structnodes_1_1CommandSettings/#public-attributes","text":"Name std::string node_name std::string input_topic","title":"Public Attributes"},{"location":"api-reference/Classes/structnodes_1_1CommandSettings/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"api-reference/Classes/structnodes_1_1CommandSettings/#variable-node_name","text":"std::string node_name;","title":"variable node_name"},{"location":"api-reference/Classes/structnodes_1_1CommandSettings/#variable-input_topic","text":"std::string input_topic; Updated on 2024-10-24 at 09:15:15 +0000","title":"variable input_topic"},{"location":"api-reference/Classes/structnodes_1_1CyclicSettings/","text":"nodes::CyclicSettings Public Attributes Name std::string output_topic uint64_t number_crunch_limit std::string node_name std::vector< std::string > inputs std::chrono::nanoseconds cycle_time Public Attributes Documentation variable output_topic std::string output_topic; variable number_crunch_limit uint64_t number_crunch_limit; variable node_name std::string node_name; variable inputs std::vector< std::string > inputs; variable cycle_time std::chrono::nanoseconds cycle_time; Updated on 2024-10-24 at 09:15:15 +0000","title":"nodes::CyclicSettings"},{"location":"api-reference/Classes/structnodes_1_1CyclicSettings/#nodescyclicsettings","text":"","title":"nodes::CyclicSettings"},{"location":"api-reference/Classes/structnodes_1_1CyclicSettings/#public-attributes","text":"Name std::string output_topic uint64_t number_crunch_limit std::string node_name std::vector< std::string > inputs std::chrono::nanoseconds cycle_time","title":"Public Attributes"},{"location":"api-reference/Classes/structnodes_1_1CyclicSettings/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"api-reference/Classes/structnodes_1_1CyclicSettings/#variable-output_topic","text":"std::string output_topic;","title":"variable output_topic"},{"location":"api-reference/Classes/structnodes_1_1CyclicSettings/#variable-number_crunch_limit","text":"uint64_t number_crunch_limit;","title":"variable number_crunch_limit"},{"location":"api-reference/Classes/structnodes_1_1CyclicSettings/#variable-node_name","text":"std::string node_name;","title":"variable node_name"},{"location":"api-reference/Classes/structnodes_1_1CyclicSettings/#variable-inputs","text":"std::vector< std::string > inputs;","title":"variable inputs"},{"location":"api-reference/Classes/structnodes_1_1CyclicSettings/#variable-cycle_time","text":"std::chrono::nanoseconds cycle_time; Updated on 2024-10-24 at 09:15:15 +0000","title":"variable cycle_time"},{"location":"api-reference/Classes/structnodes_1_1FusionSettings/","text":"nodes::FusionSettings Public Attributes Name std::string output_topic uint64_t number_crunch_limit std::string node_name std::string input_1 std::string input_0 Public Attributes Documentation variable output_topic std::string output_topic; variable number_crunch_limit uint64_t number_crunch_limit; variable node_name std::string node_name; variable input_1 std::string input_1; variable input_0 std::string input_0; Updated on 2024-10-24 at 09:15:15 +0000","title":"nodes::FusionSettings"},{"location":"api-reference/Classes/structnodes_1_1FusionSettings/#nodesfusionsettings","text":"","title":"nodes::FusionSettings"},{"location":"api-reference/Classes/structnodes_1_1FusionSettings/#public-attributes","text":"Name std::string output_topic uint64_t number_crunch_limit std::string node_name std::string input_1 std::string input_0","title":"Public Attributes"},{"location":"api-reference/Classes/structnodes_1_1FusionSettings/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"api-reference/Classes/structnodes_1_1FusionSettings/#variable-output_topic","text":"std::string output_topic;","title":"variable output_topic"},{"location":"api-reference/Classes/structnodes_1_1FusionSettings/#variable-number_crunch_limit","text":"uint64_t number_crunch_limit;","title":"variable number_crunch_limit"},{"location":"api-reference/Classes/structnodes_1_1FusionSettings/#variable-node_name","text":"std::string node_name;","title":"variable node_name"},{"location":"api-reference/Classes/structnodes_1_1FusionSettings/#variable-input_1","text":"std::string input_1;","title":"variable input_1"},{"location":"api-reference/Classes/structnodes_1_1FusionSettings/#variable-input_0","text":"std::string input_0; Updated on 2024-10-24 at 09:15:15 +0000","title":"variable input_0"},{"location":"api-reference/Classes/structnodes_1_1IntersectionSettings/","text":"nodes::IntersectionSettings Public Classes Name struct Connection Public Attributes Name std::string node_name std::vector< Connection > connections Public Attributes Documentation variable node_name std::string node_name; variable connections std::vector< Connection > connections; Updated on 2024-10-24 at 09:15:15 +0000","title":"nodes::IntersectionSettings"},{"location":"api-reference/Classes/structnodes_1_1IntersectionSettings/#nodesintersectionsettings","text":"","title":"nodes::IntersectionSettings"},{"location":"api-reference/Classes/structnodes_1_1IntersectionSettings/#public-classes","text":"Name struct Connection","title":"Public Classes"},{"location":"api-reference/Classes/structnodes_1_1IntersectionSettings/#public-attributes","text":"Name std::string node_name std::vector< Connection > connections","title":"Public Attributes"},{"location":"api-reference/Classes/structnodes_1_1IntersectionSettings/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"api-reference/Classes/structnodes_1_1IntersectionSettings/#variable-node_name","text":"std::string node_name;","title":"variable node_name"},{"location":"api-reference/Classes/structnodes_1_1IntersectionSettings/#variable-connections","text":"std::vector< Connection > connections; Updated on 2024-10-24 at 09:15:15 +0000","title":"variable connections"},{"location":"api-reference/Classes/structnodes_1_1IntersectionSettings_1_1Connection/","text":"nodes::IntersectionSettings::Connection Public Attributes Name std::string output_topic uint64_t number_crunch_limit std::string input_topic Public Attributes Documentation variable output_topic std::string output_topic; variable number_crunch_limit uint64_t number_crunch_limit; variable input_topic std::string input_topic; Updated on 2024-10-24 at 09:15:15 +0000","title":"nodes::IntersectionSettings::Connection"},{"location":"api-reference/Classes/structnodes_1_1IntersectionSettings_1_1Connection/#nodesintersectionsettingsconnection","text":"","title":"nodes::IntersectionSettings::Connection"},{"location":"api-reference/Classes/structnodes_1_1IntersectionSettings_1_1Connection/#public-attributes","text":"Name std::string output_topic uint64_t number_crunch_limit std::string input_topic","title":"Public Attributes"},{"location":"api-reference/Classes/structnodes_1_1IntersectionSettings_1_1Connection/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"api-reference/Classes/structnodes_1_1IntersectionSettings_1_1Connection/#variable-output_topic","text":"std::string output_topic;","title":"variable output_topic"},{"location":"api-reference/Classes/structnodes_1_1IntersectionSettings_1_1Connection/#variable-number_crunch_limit","text":"uint64_t number_crunch_limit;","title":"variable number_crunch_limit"},{"location":"api-reference/Classes/structnodes_1_1IntersectionSettings_1_1Connection/#variable-input_topic","text":"std::string input_topic; Updated on 2024-10-24 at 09:15:15 +0000","title":"variable input_topic"},{"location":"api-reference/Classes/structnodes_1_1PeriodicSensorSettings/","text":"nodes::PeriodicSensorSettings Public Attributes Name std::string topic_name uint64_t number_crunch_limit std::string node_name std::chrono::nanoseconds cycle_time Public Attributes Documentation variable topic_name std::string topic_name; variable number_crunch_limit uint64_t number_crunch_limit; variable node_name std::string node_name; variable cycle_time std::chrono::nanoseconds cycle_time; Updated on 2024-10-24 at 09:15:15 +0000","title":"nodes::PeriodicSensorSettings"},{"location":"api-reference/Classes/structnodes_1_1PeriodicSensorSettings/#nodesperiodicsensorsettings","text":"","title":"nodes::PeriodicSensorSettings"},{"location":"api-reference/Classes/structnodes_1_1PeriodicSensorSettings/#public-attributes","text":"Name std::string topic_name uint64_t number_crunch_limit std::string node_name std::chrono::nanoseconds cycle_time","title":"Public Attributes"},{"location":"api-reference/Classes/structnodes_1_1PeriodicSensorSettings/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"api-reference/Classes/structnodes_1_1PeriodicSensorSettings/#variable-topic_name","text":"std::string topic_name;","title":"variable topic_name"},{"location":"api-reference/Classes/structnodes_1_1PeriodicSensorSettings/#variable-number_crunch_limit","text":"uint64_t number_crunch_limit;","title":"variable number_crunch_limit"},{"location":"api-reference/Classes/structnodes_1_1PeriodicSensorSettings/#variable-node_name","text":"std::string node_name;","title":"variable node_name"},{"location":"api-reference/Classes/structnodes_1_1PeriodicSensorSettings/#variable-cycle_time","text":"std::chrono::nanoseconds cycle_time; Updated on 2024-10-24 at 09:15:15 +0000","title":"variable cycle_time"},{"location":"api-reference/Classes/structnodes_1_1SensorSettings/","text":"nodes::SensorSettings Public Attributes Name std::string topic_name std::string node_name std::chrono::nanoseconds cycle_time Public Attributes Documentation variable topic_name std::string topic_name; variable node_name std::string node_name; variable cycle_time std::chrono::nanoseconds cycle_time; Updated on 2024-10-24 at 09:15:15 +0000","title":"nodes::SensorSettings"},{"location":"api-reference/Classes/structnodes_1_1SensorSettings/#nodessensorsettings","text":"","title":"nodes::SensorSettings"},{"location":"api-reference/Classes/structnodes_1_1SensorSettings/#public-attributes","text":"Name std::string topic_name std::string node_name std::chrono::nanoseconds cycle_time","title":"Public Attributes"},{"location":"api-reference/Classes/structnodes_1_1SensorSettings/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"api-reference/Classes/structnodes_1_1SensorSettings/#variable-topic_name","text":"std::string topic_name;","title":"variable topic_name"},{"location":"api-reference/Classes/structnodes_1_1SensorSettings/#variable-node_name","text":"std::string node_name;","title":"variable node_name"},{"location":"api-reference/Classes/structnodes_1_1SensorSettings/#variable-cycle_time","text":"std::chrono::nanoseconds cycle_time; Updated on 2024-10-24 at 09:15:15 +0000","title":"variable cycle_time"},{"location":"api-reference/Classes/structnodes_1_1TransformSettings/","text":"nodes::TransformSettings Public Attributes Name std::string output_topic uint64_t number_crunch_limit std::string node_name std::string input_topic Public Attributes Documentation variable output_topic std::string output_topic; variable number_crunch_limit uint64_t number_crunch_limit; variable node_name std::string node_name; variable input_topic std::string input_topic; Updated on 2024-10-24 at 09:15:15 +0000","title":"nodes::TransformSettings"},{"location":"api-reference/Classes/structnodes_1_1TransformSettings/#nodestransformsettings","text":"","title":"nodes::TransformSettings"},{"location":"api-reference/Classes/structnodes_1_1TransformSettings/#public-attributes","text":"Name std::string output_topic uint64_t number_crunch_limit std::string node_name std::string input_topic","title":"Public Attributes"},{"location":"api-reference/Classes/structnodes_1_1TransformSettings/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"api-reference/Classes/structnodes_1_1TransformSettings/#variable-output_topic","text":"std::string output_topic;","title":"variable output_topic"},{"location":"api-reference/Classes/structnodes_1_1TransformSettings/#variable-number_crunch_limit","text":"uint64_t number_crunch_limit;","title":"variable number_crunch_limit"},{"location":"api-reference/Classes/structnodes_1_1TransformSettings/#variable-node_name","text":"std::string node_name;","title":"variable node_name"},{"location":"api-reference/Classes/structnodes_1_1TransformSettings/#variable-input_topic","text":"std::string input_topic; Updated on 2024-10-24 at 09:15:15 +0000","title":"variable input_topic"},{"location":"api-reference/Classes/structnodes_1_1rclcpp__system_1_1Cyclic_1_1subscription__t/","text":"nodes::rclcpp_system::Cyclic::subscription_t Public Attributes Name rclcpp::Subscription< message_t >::SharedPtr subscription uint32_t sequence_number message_t::SharedPtr cache Public Attributes Documentation variable subscription rclcpp::Subscription< message_t >::SharedPtr subscription; variable sequence_number uint32_t sequence_number = 0; variable cache message_t::SharedPtr cache; Updated on 2024-10-24 at 09:15:15 +0000","title":"nodes::rclcpp_system::Cyclic::subscription_t"},{"location":"api-reference/Classes/structnodes_1_1rclcpp__system_1_1Cyclic_1_1subscription__t/#nodesrclcpp_systemcyclicsubscription_t","text":"","title":"nodes::rclcpp_system::Cyclic::subscription_t"},{"location":"api-reference/Classes/structnodes_1_1rclcpp__system_1_1Cyclic_1_1subscription__t/#public-attributes","text":"Name rclcpp::Subscription< message_t >::SharedPtr subscription uint32_t sequence_number message_t::SharedPtr cache","title":"Public Attributes"},{"location":"api-reference/Classes/structnodes_1_1rclcpp__system_1_1Cyclic_1_1subscription__t/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"api-reference/Classes/structnodes_1_1rclcpp__system_1_1Cyclic_1_1subscription__t/#variable-subscription","text":"rclcpp::Subscription< message_t >::SharedPtr subscription;","title":"variable subscription"},{"location":"api-reference/Classes/structnodes_1_1rclcpp__system_1_1Cyclic_1_1subscription__t/#variable-sequence_number","text":"uint32_t sequence_number = 0;","title":"variable sequence_number"},{"location":"api-reference/Classes/structnodes_1_1rclcpp__system_1_1Cyclic_1_1subscription__t/#variable-cache","text":"message_t::SharedPtr cache; Updated on 2024-10-24 at 09:15:15 +0000","title":"variable cache"},{"location":"api-reference/Classes/structnodes_1_1rclcpp__system_1_1Fusion_1_1subscription__t/","text":"nodes::rclcpp_system::Fusion::subscription_t Public Attributes Name rclcpp::Subscription< message_t >::SharedPtr subscription uint32_t sequence_number message_t::SharedPtr cache Public Attributes Documentation variable subscription rclcpp::Subscription< message_t >::SharedPtr subscription; variable sequence_number uint32_t sequence_number = 0; variable cache message_t::SharedPtr cache; Updated on 2024-10-24 at 09:15:15 +0000","title":"nodes::rclcpp_system::Fusion::subscription_t"},{"location":"api-reference/Classes/structnodes_1_1rclcpp__system_1_1Fusion_1_1subscription__t/#nodesrclcpp_systemfusionsubscription_t","text":"","title":"nodes::rclcpp_system::Fusion::subscription_t"},{"location":"api-reference/Classes/structnodes_1_1rclcpp__system_1_1Fusion_1_1subscription__t/#public-attributes","text":"Name rclcpp::Subscription< message_t >::SharedPtr subscription uint32_t sequence_number message_t::SharedPtr cache","title":"Public Attributes"},{"location":"api-reference/Classes/structnodes_1_1rclcpp__system_1_1Fusion_1_1subscription__t/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"api-reference/Classes/structnodes_1_1rclcpp__system_1_1Fusion_1_1subscription__t/#variable-subscription","text":"rclcpp::Subscription< message_t >::SharedPtr subscription;","title":"variable subscription"},{"location":"api-reference/Classes/structnodes_1_1rclcpp__system_1_1Fusion_1_1subscription__t/#variable-sequence_number","text":"uint32_t sequence_number = 0;","title":"variable sequence_number"},{"location":"api-reference/Classes/structnodes_1_1rclcpp__system_1_1Fusion_1_1subscription__t/#variable-cache","text":"message_t::SharedPtr cache; Updated on 2024-10-24 at 09:15:15 +0000","title":"variable cache"},{"location":"api-reference/Classes/structnodes_1_1rclcpp__system_1_1Intersection_1_1Connection/","text":"nodes::rclcpp_system::Intersection::Connection Public Attributes Name rclcpp::Subscription< message_t >::SharedPtr subscription uint32_t sequence_number rclcpp::Publisher< message_t >::SharedPtr publisher uint64_t number_crunch_limit uint32_t input_sequence_number rclcpp::CallbackGroup::SharedPtr callback_group Public Attributes Documentation variable subscription rclcpp::Subscription< message_t >::SharedPtr subscription; variable sequence_number uint32_t sequence_number = 0; variable publisher rclcpp::Publisher< message_t >::SharedPtr publisher; variable number_crunch_limit uint64_t number_crunch_limit; variable input_sequence_number uint32_t input_sequence_number = 0; variable callback_group rclcpp::CallbackGroup::SharedPtr callback_group; Updated on 2024-10-24 at 09:15:15 +0000","title":"nodes::rclcpp_system::Intersection::Connection"},{"location":"api-reference/Classes/structnodes_1_1rclcpp__system_1_1Intersection_1_1Connection/#nodesrclcpp_systemintersectionconnection","text":"","title":"nodes::rclcpp_system::Intersection::Connection"},{"location":"api-reference/Classes/structnodes_1_1rclcpp__system_1_1Intersection_1_1Connection/#public-attributes","text":"Name rclcpp::Subscription< message_t >::SharedPtr subscription uint32_t sequence_number rclcpp::Publisher< message_t >::SharedPtr publisher uint64_t number_crunch_limit uint32_t input_sequence_number rclcpp::CallbackGroup::SharedPtr callback_group","title":"Public Attributes"},{"location":"api-reference/Classes/structnodes_1_1rclcpp__system_1_1Intersection_1_1Connection/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"api-reference/Classes/structnodes_1_1rclcpp__system_1_1Intersection_1_1Connection/#variable-subscription","text":"rclcpp::Subscription< message_t >::SharedPtr subscription;","title":"variable subscription"},{"location":"api-reference/Classes/structnodes_1_1rclcpp__system_1_1Intersection_1_1Connection/#variable-sequence_number","text":"uint32_t sequence_number = 0;","title":"variable sequence_number"},{"location":"api-reference/Classes/structnodes_1_1rclcpp__system_1_1Intersection_1_1Connection/#variable-publisher","text":"rclcpp::Publisher< message_t >::SharedPtr publisher;","title":"variable publisher"},{"location":"api-reference/Classes/structnodes_1_1rclcpp__system_1_1Intersection_1_1Connection/#variable-number_crunch_limit","text":"uint64_t number_crunch_limit;","title":"variable number_crunch_limit"},{"location":"api-reference/Classes/structnodes_1_1rclcpp__system_1_1Intersection_1_1Connection/#variable-input_sequence_number","text":"uint32_t input_sequence_number = 0;","title":"variable input_sequence_number"},{"location":"api-reference/Classes/structnodes_1_1rclcpp__system_1_1Intersection_1_1Connection/#variable-callback_group","text":"rclcpp::CallbackGroup::SharedPtr callback_group; Updated on 2024-10-24 at 09:15:15 +0000","title":"variable callback_group"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkCPUUsage/","text":"nodes::timing::BenchmarkCPUUsage Public Types Name using std::chrono::nanoseconds time_t using std::chrono::seconds seconds using std::chrono::milliseconds milliseconds Public Attributes Name constexpr uint64_t VOXEL_GRID_DOWNSAMPLER constexpr time_t VISUALIZER constexpr uint64_t VEHICLE_INTERFACE constexpr time_t REAR_LIDAR_DRIVER constexpr uint64_t RAY_GROUND_FILTER constexpr uint64_t POINT_CLOUD_MAP_LOADER constexpr time_t POINT_CLOUD_MAP constexpr uint64_t POINT_CLOUD_FUSION constexpr uint64_t POINTS_TRANSFORMER_REAR constexpr uint64_t POINTS_TRANSFORMER_FRONT constexpr uint64_t PARKING_PLANNER constexpr uint64_t OBJECT_COLLISION_ESTIMATOR constexpr uint64_t NDT_LOCALIZER constexpr uint64_t MPC_CONTROLLER constexpr uint64_t LANE_PLANNER constexpr uint64_t LANELET_2_MAP_LOADER constexpr uint64_t LANELET_2_GLOBAL_PLANNER constexpr time_t LANELET2MAP constexpr time_t FRONT_LIDAR_DRIVER constexpr uint64_t EUCLIDEAN_INTERSECTION constexpr time_t EUCLIDEAN_CLUSTER_SETTINGS constexpr uint64_t EUCLIDEAN_CLUSTER_DETECTOR constexpr time_t BEHAVIOR_PLANNER_CYCLE constexpr uint64_t BEHAVIOR_PLANNER Public Types Documentation using time_t using nodes::timing::BenchmarkCPUUsage::time_t = std::chrono::nanoseconds; using seconds using nodes::timing::BenchmarkCPUUsage::seconds = std::chrono::seconds; using milliseconds using nodes::timing::BenchmarkCPUUsage::milliseconds = std::chrono::milliseconds; Public Attributes Documentation variable VOXEL_GRID_DOWNSAMPLER static constexpr uint64_t VOXEL_GRID_DOWNSAMPLER = 0; variable VISUALIZER static constexpr time_t VISUALIZER = Default::VISUALIZER; variable VEHICLE_INTERFACE static constexpr uint64_t VEHICLE_INTERFACE = 0; variable REAR_LIDAR_DRIVER static constexpr time_t REAR_LIDAR_DRIVER = Default::REAR_LIDAR_DRIVER; variable RAY_GROUND_FILTER static constexpr uint64_t RAY_GROUND_FILTER = 0; variable POINT_CLOUD_MAP_LOADER static constexpr uint64_t POINT_CLOUD_MAP_LOADER = 0; variable POINT_CLOUD_MAP static constexpr time_t POINT_CLOUD_MAP = Default::POINT_CLOUD_MAP; variable POINT_CLOUD_FUSION static constexpr uint64_t POINT_CLOUD_FUSION = 0; variable POINTS_TRANSFORMER_REAR static constexpr uint64_t POINTS_TRANSFORMER_REAR = 0; variable POINTS_TRANSFORMER_FRONT static constexpr uint64_t POINTS_TRANSFORMER_FRONT = 0; variable PARKING_PLANNER static constexpr uint64_t PARKING_PLANNER = 0; variable OBJECT_COLLISION_ESTIMATOR static constexpr uint64_t OBJECT_COLLISION_ESTIMATOR = 0; variable NDT_LOCALIZER static constexpr uint64_t NDT_LOCALIZER = 0; variable MPC_CONTROLLER static constexpr uint64_t MPC_CONTROLLER = 0; variable LANE_PLANNER static constexpr uint64_t LANE_PLANNER = 0; variable LANELET_2_MAP_LOADER static constexpr uint64_t LANELET_2_MAP_LOADER = 0; variable LANELET_2_GLOBAL_PLANNER static constexpr uint64_t LANELET_2_GLOBAL_PLANNER = 0; variable LANELET2MAP static constexpr time_t LANELET2MAP = Default::LANELET2MAP; variable FRONT_LIDAR_DRIVER static constexpr time_t FRONT_LIDAR_DRIVER = Default::FRONT_LIDAR_DRIVER; variable EUCLIDEAN_INTERSECTION static constexpr uint64_t EUCLIDEAN_INTERSECTION = 0; variable EUCLIDEAN_CLUSTER_SETTINGS static constexpr time_t EUCLIDEAN_CLUSTER_SETTINGS = Default::EUCLIDEAN_CLUSTER_SETTINGS; variable EUCLIDEAN_CLUSTER_DETECTOR static constexpr uint64_t EUCLIDEAN_CLUSTER_DETECTOR = 0; variable BEHAVIOR_PLANNER_CYCLE static constexpr time_t BEHAVIOR_PLANNER_CYCLE = Default::BEHAVIOR_PLANNER_CYCLE; variable BEHAVIOR_PLANNER static constexpr uint64_t BEHAVIOR_PLANNER = 0; Updated on 2024-10-24 at 09:15:15 +0000","title":"nodes::timing::BenchmarkCPUUsage"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkCPUUsage/#nodestimingbenchmarkcpuusage","text":"","title":"nodes::timing::BenchmarkCPUUsage"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkCPUUsage/#public-types","text":"Name using std::chrono::nanoseconds time_t using std::chrono::seconds seconds using std::chrono::milliseconds milliseconds","title":"Public Types"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkCPUUsage/#public-attributes","text":"Name constexpr uint64_t VOXEL_GRID_DOWNSAMPLER constexpr time_t VISUALIZER constexpr uint64_t VEHICLE_INTERFACE constexpr time_t REAR_LIDAR_DRIVER constexpr uint64_t RAY_GROUND_FILTER constexpr uint64_t POINT_CLOUD_MAP_LOADER constexpr time_t POINT_CLOUD_MAP constexpr uint64_t POINT_CLOUD_FUSION constexpr uint64_t POINTS_TRANSFORMER_REAR constexpr uint64_t POINTS_TRANSFORMER_FRONT constexpr uint64_t PARKING_PLANNER constexpr uint64_t OBJECT_COLLISION_ESTIMATOR constexpr uint64_t NDT_LOCALIZER constexpr uint64_t MPC_CONTROLLER constexpr uint64_t LANE_PLANNER constexpr uint64_t LANELET_2_MAP_LOADER constexpr uint64_t LANELET_2_GLOBAL_PLANNER constexpr time_t LANELET2MAP constexpr time_t FRONT_LIDAR_DRIVER constexpr uint64_t EUCLIDEAN_INTERSECTION constexpr time_t EUCLIDEAN_CLUSTER_SETTINGS constexpr uint64_t EUCLIDEAN_CLUSTER_DETECTOR constexpr time_t BEHAVIOR_PLANNER_CYCLE constexpr uint64_t BEHAVIOR_PLANNER","title":"Public Attributes"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkCPUUsage/#public-types-documentation","text":"","title":"Public Types Documentation"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkCPUUsage/#using-time_t","text":"using nodes::timing::BenchmarkCPUUsage::time_t = std::chrono::nanoseconds;","title":"using time_t"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkCPUUsage/#using-seconds","text":"using nodes::timing::BenchmarkCPUUsage::seconds = std::chrono::seconds;","title":"using seconds"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkCPUUsage/#using-milliseconds","text":"using nodes::timing::BenchmarkCPUUsage::milliseconds = std::chrono::milliseconds;","title":"using milliseconds"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkCPUUsage/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkCPUUsage/#variable-voxel_grid_downsampler","text":"static constexpr uint64_t VOXEL_GRID_DOWNSAMPLER = 0;","title":"variable VOXEL_GRID_DOWNSAMPLER"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkCPUUsage/#variable-visualizer","text":"static constexpr time_t VISUALIZER = Default::VISUALIZER;","title":"variable VISUALIZER"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkCPUUsage/#variable-vehicle_interface","text":"static constexpr uint64_t VEHICLE_INTERFACE = 0;","title":"variable VEHICLE_INTERFACE"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkCPUUsage/#variable-rear_lidar_driver","text":"static constexpr time_t REAR_LIDAR_DRIVER = Default::REAR_LIDAR_DRIVER;","title":"variable REAR_LIDAR_DRIVER"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkCPUUsage/#variable-ray_ground_filter","text":"static constexpr uint64_t RAY_GROUND_FILTER = 0;","title":"variable RAY_GROUND_FILTER"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkCPUUsage/#variable-point_cloud_map_loader","text":"static constexpr uint64_t POINT_CLOUD_MAP_LOADER = 0;","title":"variable POINT_CLOUD_MAP_LOADER"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkCPUUsage/#variable-point_cloud_map","text":"static constexpr time_t POINT_CLOUD_MAP = Default::POINT_CLOUD_MAP;","title":"variable POINT_CLOUD_MAP"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkCPUUsage/#variable-point_cloud_fusion","text":"static constexpr uint64_t POINT_CLOUD_FUSION = 0;","title":"variable POINT_CLOUD_FUSION"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkCPUUsage/#variable-points_transformer_rear","text":"static constexpr uint64_t POINTS_TRANSFORMER_REAR = 0;","title":"variable POINTS_TRANSFORMER_REAR"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkCPUUsage/#variable-points_transformer_front","text":"static constexpr uint64_t POINTS_TRANSFORMER_FRONT = 0;","title":"variable POINTS_TRANSFORMER_FRONT"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkCPUUsage/#variable-parking_planner","text":"static constexpr uint64_t PARKING_PLANNER = 0;","title":"variable PARKING_PLANNER"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkCPUUsage/#variable-object_collision_estimator","text":"static constexpr uint64_t OBJECT_COLLISION_ESTIMATOR = 0;","title":"variable OBJECT_COLLISION_ESTIMATOR"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkCPUUsage/#variable-ndt_localizer","text":"static constexpr uint64_t NDT_LOCALIZER = 0;","title":"variable NDT_LOCALIZER"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkCPUUsage/#variable-mpc_controller","text":"static constexpr uint64_t MPC_CONTROLLER = 0;","title":"variable MPC_CONTROLLER"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkCPUUsage/#variable-lane_planner","text":"static constexpr uint64_t LANE_PLANNER = 0;","title":"variable LANE_PLANNER"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkCPUUsage/#variable-lanelet_2_map_loader","text":"static constexpr uint64_t LANELET_2_MAP_LOADER = 0;","title":"variable LANELET_2_MAP_LOADER"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkCPUUsage/#variable-lanelet_2_global_planner","text":"static constexpr uint64_t LANELET_2_GLOBAL_PLANNER = 0;","title":"variable LANELET_2_GLOBAL_PLANNER"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkCPUUsage/#variable-lanelet2map","text":"static constexpr time_t LANELET2MAP = Default::LANELET2MAP;","title":"variable LANELET2MAP"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkCPUUsage/#variable-front_lidar_driver","text":"static constexpr time_t FRONT_LIDAR_DRIVER = Default::FRONT_LIDAR_DRIVER;","title":"variable FRONT_LIDAR_DRIVER"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkCPUUsage/#variable-euclidean_intersection","text":"static constexpr uint64_t EUCLIDEAN_INTERSECTION = 0;","title":"variable EUCLIDEAN_INTERSECTION"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkCPUUsage/#variable-euclidean_cluster_settings","text":"static constexpr time_t EUCLIDEAN_CLUSTER_SETTINGS = Default::EUCLIDEAN_CLUSTER_SETTINGS;","title":"variable EUCLIDEAN_CLUSTER_SETTINGS"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkCPUUsage/#variable-euclidean_cluster_detector","text":"static constexpr uint64_t EUCLIDEAN_CLUSTER_DETECTOR = 0;","title":"variable EUCLIDEAN_CLUSTER_DETECTOR"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkCPUUsage/#variable-behavior_planner_cycle","text":"static constexpr time_t BEHAVIOR_PLANNER_CYCLE = Default::BEHAVIOR_PLANNER_CYCLE;","title":"variable BEHAVIOR_PLANNER_CYCLE"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkCPUUsage/#variable-behavior_planner","text":"static constexpr uint64_t BEHAVIOR_PLANNER = 0; Updated on 2024-10-24 at 09:15:15 +0000","title":"variable BEHAVIOR_PLANNER"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkThroughput/","text":"nodes::timing::BenchmarkThroughput Public Types Name using std::chrono::nanoseconds time_t using std::chrono::seconds seconds using std::chrono::milliseconds milliseconds Public Attributes Name constexpr uint64_t VOXEL_GRID_DOWNSAMPLER constexpr time_t VISUALIZER constexpr uint64_t VEHICLE_INTERFACE constexpr time_t REAR_LIDAR_DRIVER constexpr uint64_t RAY_GROUND_FILTER constexpr uint64_t POINT_CLOUD_MAP_LOADER constexpr time_t POINT_CLOUD_MAP constexpr uint64_t POINT_CLOUD_FUSION constexpr uint64_t POINTS_TRANSFORMER_REAR constexpr uint64_t POINTS_TRANSFORMER_FRONT constexpr uint64_t PARKING_PLANNER constexpr uint64_t OBJECT_COLLISION_ESTIMATOR constexpr uint64_t NDT_LOCALIZER constexpr uint64_t MPC_CONTROLLER constexpr uint64_t LANE_PLANNER constexpr uint64_t LANELET_2_MAP_LOADER constexpr uint64_t LANELET_2_GLOBAL_PLANNER constexpr time_t LANELET2MAP constexpr time_t FRONT_LIDAR_DRIVER constexpr uint64_t EUCLIDEAN_INTERSECTION constexpr time_t EUCLIDEAN_CLUSTER_SETTINGS constexpr uint64_t EUCLIDEAN_CLUSTER_DETECTOR constexpr time_t BEHAVIOR_PLANNER_CYCLE constexpr uint64_t BEHAVIOR_PLANNER Public Types Documentation using time_t using nodes::timing::BenchmarkThroughput::time_t = std::chrono::nanoseconds; using seconds using nodes::timing::BenchmarkThroughput::seconds = std::chrono::seconds; using milliseconds using nodes::timing::BenchmarkThroughput::milliseconds = std::chrono::milliseconds; Public Attributes Documentation variable VOXEL_GRID_DOWNSAMPLER static constexpr uint64_t VOXEL_GRID_DOWNSAMPLER = 0; variable VISUALIZER static constexpr time_t VISUALIZER = milliseconds(0); variable VEHICLE_INTERFACE static constexpr uint64_t VEHICLE_INTERFACE = 0; variable REAR_LIDAR_DRIVER static constexpr time_t REAR_LIDAR_DRIVER = milliseconds(0); variable RAY_GROUND_FILTER static constexpr uint64_t RAY_GROUND_FILTER = 0; variable POINT_CLOUD_MAP_LOADER static constexpr uint64_t POINT_CLOUD_MAP_LOADER = 0; variable POINT_CLOUD_MAP static constexpr time_t POINT_CLOUD_MAP = milliseconds(0); variable POINT_CLOUD_FUSION static constexpr uint64_t POINT_CLOUD_FUSION = 0; variable POINTS_TRANSFORMER_REAR static constexpr uint64_t POINTS_TRANSFORMER_REAR = 0; variable POINTS_TRANSFORMER_FRONT static constexpr uint64_t POINTS_TRANSFORMER_FRONT = 0; variable PARKING_PLANNER static constexpr uint64_t PARKING_PLANNER = 0; variable OBJECT_COLLISION_ESTIMATOR static constexpr uint64_t OBJECT_COLLISION_ESTIMATOR = 0; variable NDT_LOCALIZER static constexpr uint64_t NDT_LOCALIZER = 0; variable MPC_CONTROLLER static constexpr uint64_t MPC_CONTROLLER = 0; variable LANE_PLANNER static constexpr uint64_t LANE_PLANNER = 0; variable LANELET_2_MAP_LOADER static constexpr uint64_t LANELET_2_MAP_LOADER = 0; variable LANELET_2_GLOBAL_PLANNER static constexpr uint64_t LANELET_2_GLOBAL_PLANNER = 0; variable LANELET2MAP static constexpr time_t LANELET2MAP = milliseconds(0); variable FRONT_LIDAR_DRIVER static constexpr time_t FRONT_LIDAR_DRIVER = milliseconds(0); variable EUCLIDEAN_INTERSECTION static constexpr uint64_t EUCLIDEAN_INTERSECTION = 0; variable EUCLIDEAN_CLUSTER_SETTINGS static constexpr time_t EUCLIDEAN_CLUSTER_SETTINGS = milliseconds(0); variable EUCLIDEAN_CLUSTER_DETECTOR static constexpr uint64_t EUCLIDEAN_CLUSTER_DETECTOR = 0; variable BEHAVIOR_PLANNER_CYCLE static constexpr time_t BEHAVIOR_PLANNER_CYCLE = milliseconds(0); variable BEHAVIOR_PLANNER static constexpr uint64_t BEHAVIOR_PLANNER = 0; Updated on 2024-10-24 at 09:15:15 +0000","title":"nodes::timing::BenchmarkThroughput"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkThroughput/#nodestimingbenchmarkthroughput","text":"","title":"nodes::timing::BenchmarkThroughput"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkThroughput/#public-types","text":"Name using std::chrono::nanoseconds time_t using std::chrono::seconds seconds using std::chrono::milliseconds milliseconds","title":"Public Types"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkThroughput/#public-attributes","text":"Name constexpr uint64_t VOXEL_GRID_DOWNSAMPLER constexpr time_t VISUALIZER constexpr uint64_t VEHICLE_INTERFACE constexpr time_t REAR_LIDAR_DRIVER constexpr uint64_t RAY_GROUND_FILTER constexpr uint64_t POINT_CLOUD_MAP_LOADER constexpr time_t POINT_CLOUD_MAP constexpr uint64_t POINT_CLOUD_FUSION constexpr uint64_t POINTS_TRANSFORMER_REAR constexpr uint64_t POINTS_TRANSFORMER_FRONT constexpr uint64_t PARKING_PLANNER constexpr uint64_t OBJECT_COLLISION_ESTIMATOR constexpr uint64_t NDT_LOCALIZER constexpr uint64_t MPC_CONTROLLER constexpr uint64_t LANE_PLANNER constexpr uint64_t LANELET_2_MAP_LOADER constexpr uint64_t LANELET_2_GLOBAL_PLANNER constexpr time_t LANELET2MAP constexpr time_t FRONT_LIDAR_DRIVER constexpr uint64_t EUCLIDEAN_INTERSECTION constexpr time_t EUCLIDEAN_CLUSTER_SETTINGS constexpr uint64_t EUCLIDEAN_CLUSTER_DETECTOR constexpr time_t BEHAVIOR_PLANNER_CYCLE constexpr uint64_t BEHAVIOR_PLANNER","title":"Public Attributes"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkThroughput/#public-types-documentation","text":"","title":"Public Types Documentation"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkThroughput/#using-time_t","text":"using nodes::timing::BenchmarkThroughput::time_t = std::chrono::nanoseconds;","title":"using time_t"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkThroughput/#using-seconds","text":"using nodes::timing::BenchmarkThroughput::seconds = std::chrono::seconds;","title":"using seconds"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkThroughput/#using-milliseconds","text":"using nodes::timing::BenchmarkThroughput::milliseconds = std::chrono::milliseconds;","title":"using milliseconds"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkThroughput/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkThroughput/#variable-voxel_grid_downsampler","text":"static constexpr uint64_t VOXEL_GRID_DOWNSAMPLER = 0;","title":"variable VOXEL_GRID_DOWNSAMPLER"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkThroughput/#variable-visualizer","text":"static constexpr time_t VISUALIZER = milliseconds(0);","title":"variable VISUALIZER"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkThroughput/#variable-vehicle_interface","text":"static constexpr uint64_t VEHICLE_INTERFACE = 0;","title":"variable VEHICLE_INTERFACE"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkThroughput/#variable-rear_lidar_driver","text":"static constexpr time_t REAR_LIDAR_DRIVER = milliseconds(0);","title":"variable REAR_LIDAR_DRIVER"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkThroughput/#variable-ray_ground_filter","text":"static constexpr uint64_t RAY_GROUND_FILTER = 0;","title":"variable RAY_GROUND_FILTER"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkThroughput/#variable-point_cloud_map_loader","text":"static constexpr uint64_t POINT_CLOUD_MAP_LOADER = 0;","title":"variable POINT_CLOUD_MAP_LOADER"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkThroughput/#variable-point_cloud_map","text":"static constexpr time_t POINT_CLOUD_MAP = milliseconds(0);","title":"variable POINT_CLOUD_MAP"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkThroughput/#variable-point_cloud_fusion","text":"static constexpr uint64_t POINT_CLOUD_FUSION = 0;","title":"variable POINT_CLOUD_FUSION"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkThroughput/#variable-points_transformer_rear","text":"static constexpr uint64_t POINTS_TRANSFORMER_REAR = 0;","title":"variable POINTS_TRANSFORMER_REAR"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkThroughput/#variable-points_transformer_front","text":"static constexpr uint64_t POINTS_TRANSFORMER_FRONT = 0;","title":"variable POINTS_TRANSFORMER_FRONT"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkThroughput/#variable-parking_planner","text":"static constexpr uint64_t PARKING_PLANNER = 0;","title":"variable PARKING_PLANNER"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkThroughput/#variable-object_collision_estimator","text":"static constexpr uint64_t OBJECT_COLLISION_ESTIMATOR = 0;","title":"variable OBJECT_COLLISION_ESTIMATOR"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkThroughput/#variable-ndt_localizer","text":"static constexpr uint64_t NDT_LOCALIZER = 0;","title":"variable NDT_LOCALIZER"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkThroughput/#variable-mpc_controller","text":"static constexpr uint64_t MPC_CONTROLLER = 0;","title":"variable MPC_CONTROLLER"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkThroughput/#variable-lane_planner","text":"static constexpr uint64_t LANE_PLANNER = 0;","title":"variable LANE_PLANNER"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkThroughput/#variable-lanelet_2_map_loader","text":"static constexpr uint64_t LANELET_2_MAP_LOADER = 0;","title":"variable LANELET_2_MAP_LOADER"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkThroughput/#variable-lanelet_2_global_planner","text":"static constexpr uint64_t LANELET_2_GLOBAL_PLANNER = 0;","title":"variable LANELET_2_GLOBAL_PLANNER"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkThroughput/#variable-lanelet2map","text":"static constexpr time_t LANELET2MAP = milliseconds(0);","title":"variable LANELET2MAP"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkThroughput/#variable-front_lidar_driver","text":"static constexpr time_t FRONT_LIDAR_DRIVER = milliseconds(0);","title":"variable FRONT_LIDAR_DRIVER"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkThroughput/#variable-euclidean_intersection","text":"static constexpr uint64_t EUCLIDEAN_INTERSECTION = 0;","title":"variable EUCLIDEAN_INTERSECTION"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkThroughput/#variable-euclidean_cluster_settings","text":"static constexpr time_t EUCLIDEAN_CLUSTER_SETTINGS = milliseconds(0);","title":"variable EUCLIDEAN_CLUSTER_SETTINGS"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkThroughput/#variable-euclidean_cluster_detector","text":"static constexpr uint64_t EUCLIDEAN_CLUSTER_DETECTOR = 0;","title":"variable EUCLIDEAN_CLUSTER_DETECTOR"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkThroughput/#variable-behavior_planner_cycle","text":"static constexpr time_t BEHAVIOR_PLANNER_CYCLE = milliseconds(0);","title":"variable BEHAVIOR_PLANNER_CYCLE"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1BenchmarkThroughput/#variable-behavior_planner","text":"static constexpr uint64_t BEHAVIOR_PLANNER = 0; Updated on 2024-10-24 at 09:15:15 +0000","title":"variable BEHAVIOR_PLANNER"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1Default/","text":"nodes::timing::Default Public Types Name using std::chrono::nanoseconds time_t using std::chrono::milliseconds milliseconds Public Attributes Name constexpr uint64_t VOXEL_GRID_DOWNSAMPLER constexpr time_t VISUALIZER constexpr uint64_t VEHICLE_INTERFACE constexpr time_t REAR_LIDAR_DRIVER constexpr uint64_t RAY_GROUND_FILTER constexpr uint64_t POINT_CLOUD_MAP_LOADER constexpr time_t POINT_CLOUD_MAP constexpr uint64_t POINT_CLOUD_FUSION constexpr uint64_t POINTS_TRANSFORMER_REAR constexpr uint64_t POINTS_TRANSFORMER_FRONT constexpr uint64_t PARKING_PLANNER constexpr uint64_t OBJECT_COLLISION_ESTIMATOR constexpr uint64_t NDT_LOCALIZER constexpr uint64_t MPC_CONTROLLER constexpr uint64_t LANE_PLANNER constexpr uint64_t LANELET_2_MAP_LOADER constexpr uint64_t LANELET_2_GLOBAL_PLANNER constexpr time_t LANELET2MAP constexpr time_t FRONT_LIDAR_DRIVER constexpr uint64_t EUCLIDEAN_INTERSECTION constexpr time_t EUCLIDEAN_CLUSTER_SETTINGS constexpr uint64_t EUCLIDEAN_CLUSTER_DETECTOR constexpr time_t BEHAVIOR_PLANNER_CYCLE constexpr uint64_t BEHAVIOR_PLANNER Public Types Documentation using time_t using nodes::timing::Default::time_t = std::chrono::nanoseconds; using milliseconds using nodes::timing::Default::milliseconds = std::chrono::milliseconds; Public Attributes Documentation variable VOXEL_GRID_DOWNSAMPLER static constexpr uint64_t VOXEL_GRID_DOWNSAMPLER = 4096; variable VISUALIZER static constexpr time_t VISUALIZER = milliseconds(60); variable VEHICLE_INTERFACE static constexpr uint64_t VEHICLE_INTERFACE = 4096; variable REAR_LIDAR_DRIVER static constexpr time_t REAR_LIDAR_DRIVER = milliseconds(100); variable RAY_GROUND_FILTER static constexpr uint64_t RAY_GROUND_FILTER = 4096; variable POINT_CLOUD_MAP_LOADER static constexpr uint64_t POINT_CLOUD_MAP_LOADER = 4096; variable POINT_CLOUD_MAP static constexpr time_t POINT_CLOUD_MAP = milliseconds(120); variable POINT_CLOUD_FUSION static constexpr uint64_t POINT_CLOUD_FUSION = 4096; variable POINTS_TRANSFORMER_REAR static constexpr uint64_t POINTS_TRANSFORMER_REAR = 4096; variable POINTS_TRANSFORMER_FRONT static constexpr uint64_t POINTS_TRANSFORMER_FRONT = 4096; variable PARKING_PLANNER static constexpr uint64_t PARKING_PLANNER = 4096; variable OBJECT_COLLISION_ESTIMATOR static constexpr uint64_t OBJECT_COLLISION_ESTIMATOR = 4096; variable NDT_LOCALIZER static constexpr uint64_t NDT_LOCALIZER = 4096; variable MPC_CONTROLLER static constexpr uint64_t MPC_CONTROLLER = 4096; variable LANE_PLANNER static constexpr uint64_t LANE_PLANNER = 4096; variable LANELET_2_MAP_LOADER static constexpr uint64_t LANELET_2_MAP_LOADER = 4096; variable LANELET_2_GLOBAL_PLANNER static constexpr uint64_t LANELET_2_GLOBAL_PLANNER = 4096; variable LANELET2MAP static constexpr time_t LANELET2MAP = milliseconds(100); variable FRONT_LIDAR_DRIVER static constexpr time_t FRONT_LIDAR_DRIVER = milliseconds(100); variable EUCLIDEAN_INTERSECTION static constexpr uint64_t EUCLIDEAN_INTERSECTION = 4096; variable EUCLIDEAN_CLUSTER_SETTINGS static constexpr time_t EUCLIDEAN_CLUSTER_SETTINGS = milliseconds(25); variable EUCLIDEAN_CLUSTER_DETECTOR static constexpr uint64_t EUCLIDEAN_CLUSTER_DETECTOR = 4096; variable BEHAVIOR_PLANNER_CYCLE static constexpr time_t BEHAVIOR_PLANNER_CYCLE = milliseconds(100); variable BEHAVIOR_PLANNER static constexpr uint64_t BEHAVIOR_PLANNER = 4096; Updated on 2024-10-24 at 09:15:15 +0000","title":"nodes::timing::Default"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1Default/#nodestimingdefault","text":"","title":"nodes::timing::Default"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1Default/#public-types","text":"Name using std::chrono::nanoseconds time_t using std::chrono::milliseconds milliseconds","title":"Public Types"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1Default/#public-attributes","text":"Name constexpr uint64_t VOXEL_GRID_DOWNSAMPLER constexpr time_t VISUALIZER constexpr uint64_t VEHICLE_INTERFACE constexpr time_t REAR_LIDAR_DRIVER constexpr uint64_t RAY_GROUND_FILTER constexpr uint64_t POINT_CLOUD_MAP_LOADER constexpr time_t POINT_CLOUD_MAP constexpr uint64_t POINT_CLOUD_FUSION constexpr uint64_t POINTS_TRANSFORMER_REAR constexpr uint64_t POINTS_TRANSFORMER_FRONT constexpr uint64_t PARKING_PLANNER constexpr uint64_t OBJECT_COLLISION_ESTIMATOR constexpr uint64_t NDT_LOCALIZER constexpr uint64_t MPC_CONTROLLER constexpr uint64_t LANE_PLANNER constexpr uint64_t LANELET_2_MAP_LOADER constexpr uint64_t LANELET_2_GLOBAL_PLANNER constexpr time_t LANELET2MAP constexpr time_t FRONT_LIDAR_DRIVER constexpr uint64_t EUCLIDEAN_INTERSECTION constexpr time_t EUCLIDEAN_CLUSTER_SETTINGS constexpr uint64_t EUCLIDEAN_CLUSTER_DETECTOR constexpr time_t BEHAVIOR_PLANNER_CYCLE constexpr uint64_t BEHAVIOR_PLANNER","title":"Public Attributes"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1Default/#public-types-documentation","text":"","title":"Public Types Documentation"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1Default/#using-time_t","text":"using nodes::timing::Default::time_t = std::chrono::nanoseconds;","title":"using time_t"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1Default/#using-milliseconds","text":"using nodes::timing::Default::milliseconds = std::chrono::milliseconds;","title":"using milliseconds"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1Default/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1Default/#variable-voxel_grid_downsampler","text":"static constexpr uint64_t VOXEL_GRID_DOWNSAMPLER = 4096;","title":"variable VOXEL_GRID_DOWNSAMPLER"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1Default/#variable-visualizer","text":"static constexpr time_t VISUALIZER = milliseconds(60);","title":"variable VISUALIZER"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1Default/#variable-vehicle_interface","text":"static constexpr uint64_t VEHICLE_INTERFACE = 4096;","title":"variable VEHICLE_INTERFACE"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1Default/#variable-rear_lidar_driver","text":"static constexpr time_t REAR_LIDAR_DRIVER = milliseconds(100);","title":"variable REAR_LIDAR_DRIVER"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1Default/#variable-ray_ground_filter","text":"static constexpr uint64_t RAY_GROUND_FILTER = 4096;","title":"variable RAY_GROUND_FILTER"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1Default/#variable-point_cloud_map_loader","text":"static constexpr uint64_t POINT_CLOUD_MAP_LOADER = 4096;","title":"variable POINT_CLOUD_MAP_LOADER"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1Default/#variable-point_cloud_map","text":"static constexpr time_t POINT_CLOUD_MAP = milliseconds(120);","title":"variable POINT_CLOUD_MAP"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1Default/#variable-point_cloud_fusion","text":"static constexpr uint64_t POINT_CLOUD_FUSION = 4096;","title":"variable POINT_CLOUD_FUSION"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1Default/#variable-points_transformer_rear","text":"static constexpr uint64_t POINTS_TRANSFORMER_REAR = 4096;","title":"variable POINTS_TRANSFORMER_REAR"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1Default/#variable-points_transformer_front","text":"static constexpr uint64_t POINTS_TRANSFORMER_FRONT = 4096;","title":"variable POINTS_TRANSFORMER_FRONT"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1Default/#variable-parking_planner","text":"static constexpr uint64_t PARKING_PLANNER = 4096;","title":"variable PARKING_PLANNER"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1Default/#variable-object_collision_estimator","text":"static constexpr uint64_t OBJECT_COLLISION_ESTIMATOR = 4096;","title":"variable OBJECT_COLLISION_ESTIMATOR"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1Default/#variable-ndt_localizer","text":"static constexpr uint64_t NDT_LOCALIZER = 4096;","title":"variable NDT_LOCALIZER"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1Default/#variable-mpc_controller","text":"static constexpr uint64_t MPC_CONTROLLER = 4096;","title":"variable MPC_CONTROLLER"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1Default/#variable-lane_planner","text":"static constexpr uint64_t LANE_PLANNER = 4096;","title":"variable LANE_PLANNER"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1Default/#variable-lanelet_2_map_loader","text":"static constexpr uint64_t LANELET_2_MAP_LOADER = 4096;","title":"variable LANELET_2_MAP_LOADER"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1Default/#variable-lanelet_2_global_planner","text":"static constexpr uint64_t LANELET_2_GLOBAL_PLANNER = 4096;","title":"variable LANELET_2_GLOBAL_PLANNER"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1Default/#variable-lanelet2map","text":"static constexpr time_t LANELET2MAP = milliseconds(100);","title":"variable LANELET2MAP"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1Default/#variable-front_lidar_driver","text":"static constexpr time_t FRONT_LIDAR_DRIVER = milliseconds(100);","title":"variable FRONT_LIDAR_DRIVER"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1Default/#variable-euclidean_intersection","text":"static constexpr uint64_t EUCLIDEAN_INTERSECTION = 4096;","title":"variable EUCLIDEAN_INTERSECTION"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1Default/#variable-euclidean_cluster_settings","text":"static constexpr time_t EUCLIDEAN_CLUSTER_SETTINGS = milliseconds(25);","title":"variable EUCLIDEAN_CLUSTER_SETTINGS"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1Default/#variable-euclidean_cluster_detector","text":"static constexpr uint64_t EUCLIDEAN_CLUSTER_DETECTOR = 4096;","title":"variable EUCLIDEAN_CLUSTER_DETECTOR"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1Default/#variable-behavior_planner_cycle","text":"static constexpr time_t BEHAVIOR_PLANNER_CYCLE = milliseconds(100);","title":"variable BEHAVIOR_PLANNER_CYCLE"},{"location":"api-reference/Classes/structnodes_1_1timing_1_1Default/#variable-behavior_planner","text":"static constexpr uint64_t BEHAVIOR_PLANNER = 4096; Updated on 2024-10-24 at 09:15:15 +0000","title":"variable BEHAVIOR_PLANNER"},{"location":"api-reference/Classes/structreference__interfaces_1_1msg_1_1Message4kb/","text":"reference_interfaces::msg::Message4kb Public Attributes Name reference_interfaces::msg::TransmissionStats stats uint64 size int64 data Public Attributes Documentation variable stats reference_interfaces::msg::TransmissionStats stats; variable size uint64 size; variable data int64 data; Updated on 2024-10-24 at 09:15:15 +0000","title":"reference_interfaces::msg::Message4kb"},{"location":"api-reference/Classes/structreference__interfaces_1_1msg_1_1Message4kb/#reference_interfacesmsgmessage4kb","text":"","title":"reference_interfaces::msg::Message4kb"},{"location":"api-reference/Classes/structreference__interfaces_1_1msg_1_1Message4kb/#public-attributes","text":"Name reference_interfaces::msg::TransmissionStats stats uint64 size int64 data","title":"Public Attributes"},{"location":"api-reference/Classes/structreference__interfaces_1_1msg_1_1Message4kb/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"api-reference/Classes/structreference__interfaces_1_1msg_1_1Message4kb/#variable-stats","text":"reference_interfaces::msg::TransmissionStats stats;","title":"variable stats"},{"location":"api-reference/Classes/structreference__interfaces_1_1msg_1_1Message4kb/#variable-size","text":"uint64 size;","title":"variable size"},{"location":"api-reference/Classes/structreference__interfaces_1_1msg_1_1Message4kb/#variable-data","text":"int64 data; Updated on 2024-10-24 at 09:15:15 +0000","title":"variable data"},{"location":"api-reference/Classes/structreference__interfaces_1_1msg_1_1TransmissionStats/","text":"reference_interfaces::msg::TransmissionStats Public Attributes Name uint64 timestamp uint32 sequence_number char node_name uint32 dropped_samples Public Attributes Documentation variable timestamp uint64 timestamp; variable sequence_number uint32 sequence_number; variable node_name char node_name; variable dropped_samples uint32 dropped_samples; Updated on 2024-10-24 at 09:15:15 +0000","title":"reference_interfaces::msg::TransmissionStats"},{"location":"api-reference/Classes/structreference__interfaces_1_1msg_1_1TransmissionStats/#reference_interfacesmsgtransmissionstats","text":"","title":"reference_interfaces::msg::TransmissionStats"},{"location":"api-reference/Classes/structreference__interfaces_1_1msg_1_1TransmissionStats/#public-attributes","text":"Name uint64 timestamp uint32 sequence_number char node_name uint32 dropped_samples","title":"Public Attributes"},{"location":"api-reference/Classes/structreference__interfaces_1_1msg_1_1TransmissionStats/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"api-reference/Classes/structreference__interfaces_1_1msg_1_1TransmissionStats/#variable-timestamp","text":"uint64 timestamp;","title":"variable timestamp"},{"location":"api-reference/Classes/structreference__interfaces_1_1msg_1_1TransmissionStats/#variable-sequence_number","text":"uint32 sequence_number;","title":"variable sequence_number"},{"location":"api-reference/Classes/structreference__interfaces_1_1msg_1_1TransmissionStats/#variable-node_name","text":"char node_name;","title":"variable node_name"},{"location":"api-reference/Classes/structreference__interfaces_1_1msg_1_1TransmissionStats/#variable-dropped_samples","text":"uint32 dropped_samples; Updated on 2024-10-24 at 09:15:15 +0000","title":"variable dropped_samples"},{"location":"api-reference/Classes/structsample__statistic__t/","text":"sample_statistic_t Public Attributes Name uint64_t timepoint_of_first_received_sample uint64_t previous_behavior_planner_time_stamp uint32_t previous_behavior_planner_sequence statistic_value_t latency statistic_value_t hot_path_latency statistic_value_t behavior_planner_period Public Attributes Documentation variable timepoint_of_first_received_sample uint64_t timepoint_of_first_received_sample = 0; variable previous_behavior_planner_time_stamp uint64_t previous_behavior_planner_time_stamp = 0; variable previous_behavior_planner_sequence uint32_t previous_behavior_planner_sequence = 0; variable latency statistic_value_t latency; variable hot_path_latency statistic_value_t hot_path_latency; variable behavior_planner_period statistic_value_t behavior_planner_period; Updated on 2024-10-24 at 09:15:15 +0000","title":"sample_statistic_t"},{"location":"api-reference/Classes/structsample__statistic__t/#sample_statistic_t","text":"","title":"sample_statistic_t"},{"location":"api-reference/Classes/structsample__statistic__t/#public-attributes","text":"Name uint64_t timepoint_of_first_received_sample uint64_t previous_behavior_planner_time_stamp uint32_t previous_behavior_planner_sequence statistic_value_t latency statistic_value_t hot_path_latency statistic_value_t behavior_planner_period","title":"Public Attributes"},{"location":"api-reference/Classes/structsample__statistic__t/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"api-reference/Classes/structsample__statistic__t/#variable-timepoint_of_first_received_sample","text":"uint64_t timepoint_of_first_received_sample = 0;","title":"variable timepoint_of_first_received_sample"},{"location":"api-reference/Classes/structsample__statistic__t/#variable-previous_behavior_planner_time_stamp","text":"uint64_t previous_behavior_planner_time_stamp = 0;","title":"variable previous_behavior_planner_time_stamp"},{"location":"api-reference/Classes/structsample__statistic__t/#variable-previous_behavior_planner_sequence","text":"uint32_t previous_behavior_planner_sequence = 0;","title":"variable previous_behavior_planner_sequence"},{"location":"api-reference/Classes/structsample__statistic__t/#variable-latency","text":"statistic_value_t latency;","title":"variable latency"},{"location":"api-reference/Classes/structsample__statistic__t/#variable-hot_path_latency","text":"statistic_value_t hot_path_latency;","title":"variable hot_path_latency"},{"location":"api-reference/Classes/structsample__statistic__t/#variable-behavior_planner_period","text":"statistic_value_t behavior_planner_period; Updated on 2024-10-24 at 09:15:15 +0000","title":"variable behavior_planner_period"},{"location":"api-reference/Classes/structstatistic__value__t/","text":"statistic_value_t Public Functions Name void set (const uint64_t value) Public Attributes Name double total_number std::string suffix uint64_t min uint64_t max double m2 double deviation uint64_t current double average double adjustment Public Functions Documentation function set inline void set( const uint64_t value ) Public Attributes Documentation variable total_number double total_number = 0.0; variable suffix std::string suffix; variable min uint64_t min = std::numeric_limits<uint64_t>::max(); variable max uint64_t max = 0; variable m2 double m2 = 0.0; variable deviation double deviation = 0.0; variable current uint64_t current = 0; variable average double average = 0.0; variable adjustment double adjustment = 0.0; Updated on 2024-10-24 at 09:15:15 +0000","title":"statistic_value_t"},{"location":"api-reference/Classes/structstatistic__value__t/#statistic_value_t","text":"","title":"statistic_value_t"},{"location":"api-reference/Classes/structstatistic__value__t/#public-functions","text":"Name void set (const uint64_t value)","title":"Public Functions"},{"location":"api-reference/Classes/structstatistic__value__t/#public-attributes","text":"Name double total_number std::string suffix uint64_t min uint64_t max double m2 double deviation uint64_t current double average double adjustment","title":"Public Attributes"},{"location":"api-reference/Classes/structstatistic__value__t/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"api-reference/Classes/structstatistic__value__t/#function-set","text":"inline void set( const uint64_t value )","title":"function set"},{"location":"api-reference/Classes/structstatistic__value__t/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"api-reference/Classes/structstatistic__value__t/#variable-total_number","text":"double total_number = 0.0;","title":"variable total_number"},{"location":"api-reference/Classes/structstatistic__value__t/#variable-suffix","text":"std::string suffix;","title":"variable suffix"},{"location":"api-reference/Classes/structstatistic__value__t/#variable-min","text":"uint64_t min = std::numeric_limits<uint64_t>::max();","title":"variable min"},{"location":"api-reference/Classes/structstatistic__value__t/#variable-max","text":"uint64_t max = 0;","title":"variable max"},{"location":"api-reference/Classes/structstatistic__value__t/#variable-m2","text":"double m2 = 0.0;","title":"variable m2"},{"location":"api-reference/Classes/structstatistic__value__t/#variable-deviation","text":"double deviation = 0.0;","title":"variable deviation"},{"location":"api-reference/Classes/structstatistic__value__t/#variable-current","text":"uint64_t current = 0;","title":"variable current"},{"location":"api-reference/Classes/structstatistic__value__t/#variable-average","text":"double average = 0.0;","title":"variable average"},{"location":"api-reference/Classes/structstatistic__value__t/#variable-adjustment","text":"double adjustment = 0.0; Updated on 2024-10-24 at 09:15:15 +0000","title":"variable adjustment"},{"location":"api-reference/Modules/","text":"Modules Updated on 2024-10-24 at 09:15:15 +0000","title":"Modules"},{"location":"api-reference/Modules/#modules","text":"Updated on 2024-10-24 at 09:15:15 +0000","title":"Modules"},{"location":"api-reference/Namespaces/","text":"Namespaces namespace benchmark namespace conftest namespace nodes namespace rclcpp_system namespace timing namespace rclcpp namespace reference_interfaces namespace msg namespace Message4kb_Constants namespace TransmissionStats_Constants namespace reference_system_py namespace benchmark namespace callback_duration namespace constants namespace dropped_messages namespace memory_usage namespace plot_utils namespace report namespace std_latency namespace trace_utils namespace setup namespace std::chrono_literals namespace test_platform namespace test_requirements namespace testing namespace unittest Updated on 2024-10-24 at 09:15:15 +0000","title":"Namespaces"},{"location":"api-reference/Namespaces/#namespaces","text":"namespace benchmark namespace conftest namespace nodes namespace rclcpp_system namespace timing namespace rclcpp namespace reference_interfaces namespace msg namespace Message4kb_Constants namespace TransmissionStats_Constants namespace reference_system_py namespace benchmark namespace callback_duration namespace constants namespace dropped_messages namespace memory_usage namespace plot_utils namespace report namespace std_latency namespace trace_utils namespace setup namespace std::chrono_literals namespace test_platform namespace test_requirements namespace testing namespace unittest Updated on 2024-10-24 at 09:15:15 +0000","title":"Namespaces"},{"location":"api-reference/Namespaces/namespacebenchmark/","text":"benchmark Attributes Name trace_types trace_type template_file list runtimes runtime_sec rmws rmw parser help list exes exe_patterns exe default tuple create_dir dict common_args cmdline_args action Attributes Documentation variable trace_types trace_types; variable trace_type trace_type; variable template_file template_file; variable runtimes list runtimes = [int(runtime) for runtime in cmdline_args.runtimes.split(',')]; variable runtime_sec runtime_sec; variable rmws rmws; variable rmw rmw; variable parser parser = argparse.ArgumentParser(description='Benchmark an executor implementation.'); variable help help; variable exes list exes = [exe for pattern in exe_patterns for exe in available_executables(pattern=pattern, pkg=common_args['pkg'])]; variable exe_patterns exe_patterns; variable exe exe; variable default default; variable create_dir tuple create_dir = (not cmdline_args.plot_only); variable common_args dict common_args = {'pkg': 'autoware_reference_system', 'directory': cmdline_args.logdir}; variable cmdline_args cmdline_args = parser.parse_args(); variable action action; Updated on 2024-10-24 at 09:15:15 +0000","title":"benchmark"},{"location":"api-reference/Namespaces/namespacebenchmark/#benchmark","text":"","title":"benchmark"},{"location":"api-reference/Namespaces/namespacebenchmark/#attributes","text":"Name trace_types trace_type template_file list runtimes runtime_sec rmws rmw parser help list exes exe_patterns exe default tuple create_dir dict common_args cmdline_args action","title":"Attributes"},{"location":"api-reference/Namespaces/namespacebenchmark/#attributes-documentation","text":"","title":"Attributes Documentation"},{"location":"api-reference/Namespaces/namespacebenchmark/#variable-trace_types","text":"trace_types;","title":"variable trace_types"},{"location":"api-reference/Namespaces/namespacebenchmark/#variable-trace_type","text":"trace_type;","title":"variable trace_type"},{"location":"api-reference/Namespaces/namespacebenchmark/#variable-template_file","text":"template_file;","title":"variable template_file"},{"location":"api-reference/Namespaces/namespacebenchmark/#variable-runtimes","text":"list runtimes = [int(runtime) for runtime in cmdline_args.runtimes.split(',')];","title":"variable runtimes"},{"location":"api-reference/Namespaces/namespacebenchmark/#variable-runtime_sec","text":"runtime_sec;","title":"variable runtime_sec"},{"location":"api-reference/Namespaces/namespacebenchmark/#variable-rmws","text":"rmws;","title":"variable rmws"},{"location":"api-reference/Namespaces/namespacebenchmark/#variable-rmw","text":"rmw;","title":"variable rmw"},{"location":"api-reference/Namespaces/namespacebenchmark/#variable-parser","text":"parser = argparse.ArgumentParser(description='Benchmark an executor implementation.');","title":"variable parser"},{"location":"api-reference/Namespaces/namespacebenchmark/#variable-help","text":"help;","title":"variable help"},{"location":"api-reference/Namespaces/namespacebenchmark/#variable-exes","text":"list exes = [exe for pattern in exe_patterns for exe in available_executables(pattern=pattern, pkg=common_args['pkg'])];","title":"variable exes"},{"location":"api-reference/Namespaces/namespacebenchmark/#variable-exe_patterns","text":"exe_patterns;","title":"variable exe_patterns"},{"location":"api-reference/Namespaces/namespacebenchmark/#variable-exe","text":"exe;","title":"variable exe"},{"location":"api-reference/Namespaces/namespacebenchmark/#variable-default","text":"default;","title":"variable default"},{"location":"api-reference/Namespaces/namespacebenchmark/#variable-create_dir","text":"tuple create_dir = (not cmdline_args.plot_only);","title":"variable create_dir"},{"location":"api-reference/Namespaces/namespacebenchmark/#variable-common_args","text":"dict common_args = {'pkg': 'autoware_reference_system', 'directory': cmdline_args.logdir};","title":"variable common_args"},{"location":"api-reference/Namespaces/namespacebenchmark/#variable-cmdline_args","text":"cmdline_args = parser.parse_args();","title":"variable cmdline_args"},{"location":"api-reference/Namespaces/namespacebenchmark/#variable-action","text":"action; Updated on 2024-10-24 at 09:15:15 +0000","title":"variable action"},{"location":"api-reference/Namespaces/namespaceconftest/","text":"conftest Functions Name pytest_configure (config config) pytest_collection_modifyitems (items items) Functions Documentation function pytest_configure pytest_configure( config config ) Document pytest.mark.TEST_ID to avoid pytest warning.``` ### function pytest_collection_modifyitems ```python pytest_collection_modifyitems( items items ) Updated on 2024-10-24 at 09:15:15 +0000","title":"conftest"},{"location":"api-reference/Namespaces/namespaceconftest/#conftest","text":"","title":"conftest"},{"location":"api-reference/Namespaces/namespaceconftest/#functions","text":"Name pytest_configure (config config) pytest_collection_modifyitems (items items)","title":"Functions"},{"location":"api-reference/Namespaces/namespaceconftest/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"api-reference/Namespaces/namespaceconftest/#function-pytest_configure","text":"pytest_configure( config config ) Document pytest.mark.TEST_ID to avoid pytest warning.``` ### function pytest_collection_modifyitems ```python pytest_collection_modifyitems( items items ) Updated on 2024-10-24 at 09:15:15 +0000","title":"function pytest_configure"},{"location":"api-reference/Namespaces/namespacenodes/","text":"nodes Namespaces Name nodes::timing nodes::rclcpp_system Classes Name struct nodes::TransformSettings struct nodes::SensorSettings struct nodes::PeriodicSensorSettings struct nodes::IntersectionSettings struct nodes::FusionSettings struct nodes::CyclicSettings struct nodes::CommandSettings Updated on 2024-10-24 at 09:15:15 +0000","title":"nodes"},{"location":"api-reference/Namespaces/namespacenodes/#nodes","text":"","title":"nodes"},{"location":"api-reference/Namespaces/namespacenodes/#namespaces","text":"Name nodes::timing nodes::rclcpp_system","title":"Namespaces"},{"location":"api-reference/Namespaces/namespacenodes/#classes","text":"Name struct nodes::TransformSettings struct nodes::SensorSettings struct nodes::PeriodicSensorSettings struct nodes::IntersectionSettings struct nodes::FusionSettings struct nodes::CyclicSettings struct nodes::CommandSettings Updated on 2024-10-24 at 09:15:15 +0000","title":"Classes"},{"location":"api-reference/Namespaces/namespacenodes_1_1rclcpp__system/","text":"nodes::rclcpp_system Classes Name class nodes::rclcpp_system::Transform class nodes::rclcpp_system::Sensor class nodes::rclcpp_system::Intersection class nodes::rclcpp_system::Fusion class nodes::rclcpp_system::Cyclic class nodes::rclcpp_system::Command Updated on 2024-10-24 at 09:15:15 +0000","title":"nodes::rclcpp_system"},{"location":"api-reference/Namespaces/namespacenodes_1_1rclcpp__system/#nodesrclcpp_system","text":"","title":"nodes::rclcpp_system"},{"location":"api-reference/Namespaces/namespacenodes_1_1rclcpp__system/#classes","text":"Name class nodes::rclcpp_system::Transform class nodes::rclcpp_system::Sensor class nodes::rclcpp_system::Intersection class nodes::rclcpp_system::Fusion class nodes::rclcpp_system::Cyclic class nodes::rclcpp_system::Command Updated on 2024-10-24 at 09:15:15 +0000","title":"Classes"},{"location":"api-reference/Namespaces/namespacenodes_1_1timing/","text":"nodes::timing Classes Name struct nodes::timing::Default struct nodes::timing::BenchmarkThroughput struct nodes::timing::BenchmarkCPUUsage Updated on 2024-10-24 at 09:15:15 +0000","title":"nodes::timing"},{"location":"api-reference/Namespaces/namespacenodes_1_1timing/#nodestiming","text":"","title":"nodes::timing"},{"location":"api-reference/Namespaces/namespacenodes_1_1timing/#classes","text":"Name struct nodes::timing::Default struct nodes::timing::BenchmarkThroughput struct nodes::timing::BenchmarkCPUUsage Updated on 2024-10-24 at 09:15:15 +0000","title":"Classes"},{"location":"api-reference/Namespaces/namespacerclcpp/","text":"rclcpp Updated on 2024-10-24 at 09:15:15 +0000","title":"rclcpp"},{"location":"api-reference/Namespaces/namespacerclcpp/#rclcpp","text":"Updated on 2024-10-24 at 09:15:15 +0000","title":"rclcpp"},{"location":"api-reference/Namespaces/namespacereference__interfaces/","text":"reference_interfaces Namespaces Name reference_interfaces::msg Updated on 2024-10-24 at 09:15:15 +0000","title":"reference_interfaces"},{"location":"api-reference/Namespaces/namespacereference__interfaces/#reference_interfaces","text":"","title":"reference_interfaces"},{"location":"api-reference/Namespaces/namespacereference__interfaces/#namespaces","text":"Name reference_interfaces::msg Updated on 2024-10-24 at 09:15:15 +0000","title":"Namespaces"},{"location":"api-reference/Namespaces/namespacereference__interfaces_1_1msg/","text":"reference_interfaces::msg Namespaces Name reference_interfaces::msg::TransmissionStats_Constants reference_interfaces::msg::Message4kb_Constants Classes Name struct reference_interfaces::msg::TransmissionStats struct reference_interfaces::msg::Message4kb Updated on 2024-10-24 at 09:15:15 +0000","title":"reference_interfaces::msg"},{"location":"api-reference/Namespaces/namespacereference__interfaces_1_1msg/#reference_interfacesmsg","text":"","title":"reference_interfaces::msg"},{"location":"api-reference/Namespaces/namespacereference__interfaces_1_1msg/#namespaces","text":"Name reference_interfaces::msg::TransmissionStats_Constants reference_interfaces::msg::Message4kb_Constants","title":"Namespaces"},{"location":"api-reference/Namespaces/namespacereference__interfaces_1_1msg/#classes","text":"Name struct reference_interfaces::msg::TransmissionStats struct reference_interfaces::msg::Message4kb Updated on 2024-10-24 at 09:15:15 +0000","title":"Classes"},{"location":"api-reference/Namespaces/namespacereference__interfaces_1_1msg_1_1Message4kb__Constants/","text":"reference_interfaces::msg::Message4kb_Constants Attributes Name const uint64 STATS_CAPACITY Attributes Documentation variable STATS_CAPACITY const uint64 STATS_CAPACITY = 63; Updated on 2024-10-24 at 09:15:15 +0000","title":"reference_interfaces::msg::Message4kb_Constants"},{"location":"api-reference/Namespaces/namespacereference__interfaces_1_1msg_1_1Message4kb__Constants/#reference_interfacesmsgmessage4kb_constants","text":"","title":"reference_interfaces::msg::Message4kb_Constants"},{"location":"api-reference/Namespaces/namespacereference__interfaces_1_1msg_1_1Message4kb__Constants/#attributes","text":"Name const uint64 STATS_CAPACITY","title":"Attributes"},{"location":"api-reference/Namespaces/namespacereference__interfaces_1_1msg_1_1Message4kb__Constants/#attributes-documentation","text":"","title":"Attributes Documentation"},{"location":"api-reference/Namespaces/namespacereference__interfaces_1_1msg_1_1Message4kb__Constants/#variable-stats_capacity","text":"const uint64 STATS_CAPACITY = 63; Updated on 2024-10-24 at 09:15:15 +0000","title":"variable STATS_CAPACITY"},{"location":"api-reference/Namespaces/namespacereference__interfaces_1_1msg_1_1TransmissionStats__Constants/","text":"reference_interfaces::msg::TransmissionStats_Constants Attributes Name const uint64 NODE_NAME_LENGTH Attributes Documentation variable NODE_NAME_LENGTH const uint64 NODE_NAME_LENGTH = 48; Updated on 2024-10-24 at 09:15:15 +0000","title":"reference_interfaces::msg::TransmissionStats_Constants"},{"location":"api-reference/Namespaces/namespacereference__interfaces_1_1msg_1_1TransmissionStats__Constants/#reference_interfacesmsgtransmissionstats_constants","text":"","title":"reference_interfaces::msg::TransmissionStats_Constants"},{"location":"api-reference/Namespaces/namespacereference__interfaces_1_1msg_1_1TransmissionStats__Constants/#attributes","text":"Name const uint64 NODE_NAME_LENGTH","title":"Attributes"},{"location":"api-reference/Namespaces/namespacereference__interfaces_1_1msg_1_1TransmissionStats__Constants/#attributes-documentation","text":"","title":"Attributes Documentation"},{"location":"api-reference/Namespaces/namespacereference__interfaces_1_1msg_1_1TransmissionStats__Constants/#variable-node_name_length","text":"const uint64 NODE_NAME_LENGTH = 48; Updated on 2024-10-24 at 09:15:15 +0000","title":"variable NODE_NAME_LENGTH"},{"location":"api-reference/Namespaces/namespacereference__system__py/","text":"reference_system_py Namespaces Name reference_system_py::trace_utils reference_system_py::std_latency reference_system_py::report reference_system_py::plot_utils reference_system_py::memory_usage reference_system_py::dropped_messages reference_system_py::constants reference_system_py::callback_duration reference_system_py::benchmark Updated on 2024-10-24 at 09:15:15 +0000","title":"reference_system_py"},{"location":"api-reference/Namespaces/namespacereference__system__py/#reference_system_py","text":"","title":"reference_system_py"},{"location":"api-reference/Namespaces/namespacereference__system__py/#namespaces","text":"Name reference_system_py::trace_utils reference_system_py::std_latency reference_system_py::report reference_system_py::plot_utils reference_system_py::memory_usage reference_system_py::dropped_messages reference_system_py::constants reference_system_py::callback_duration reference_system_py::benchmark Updated on 2024-10-24 at 09:15:15 +0000","title":"Namespaces"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1benchmark/","text":"reference_system_py::benchmark Functions Name terminatingRos2Run (pkg pkg, executable executable, rmw rmw, env env =os.environ, args args =[], ** kwargs) setup_benchmark_directory (pkg pkg, create create =False) roudi_daemon (env env =os.environ, roudi_config_path roudi_config_path =None) get_benchmark_directory (base_directory base_directory, executable executable, runtime_sec runtime_sec, rmw rmw, create create =False) get_benchmark_directories_below (base_directory base_directory, runtime_sec runtime_sec =None) generate_trace (trace_type trace_type, * args, ** kwargs) generate_std_trace (executable executable, pkg pkg, directory directory, runtime_sec runtime_sec, rmw rmw) generate_memory_trace (executable executable, pkg pkg, directory directory, runtime_sec runtime_sec, rmw rmw) generate_callback_trace (executable executable, pkg pkg, directory directory, runtime_sec runtime_sec, rmw rmw) available_executables (pkg pkg, pattern pattern =' *') Attributes Name bool tracetools_available ROS_HOME REFERENCE_SYSTEM_SHARE_DIR Functions Documentation function terminatingRos2Run terminatingRos2Run( pkg pkg, executable executable, rmw rmw, env env =os.environ, args args =[], ** kwargs ) Run the given executable (part of the given package) under the given rmw. The executable is automatically terminated upon exit from the context function setup_benchmark_directory setup_benchmark_directory( pkg pkg, create create =False ) function roudi_daemon roudi_daemon( env env =os.environ, roudi_config_path roudi_config_path =None ) Context manager that runs a RouDi instance for the duration of the context. The `env` parameter specifies environment variables for the RouDi process. The `roudi_config_path` parameter can be used to provide a RouDi toml configuration file. function get_benchmark_directory get_benchmark_directory( base_directory base_directory, executable executable, runtime_sec runtime_sec, rmw rmw, create create =False ) Return the directory to place measurements and reports for the given experiment. If `create` is True, the directory is created if it does not exist yet. function get_benchmark_directories_below get_benchmark_directories_below( base_directory base_directory, runtime_sec runtime_sec =None ) Return all benchmark directories found below `base_directory`.``` ### function generate_trace ```python generate_trace( trace_type trace_type, * args, ** kwargs ) function generate_std_trace generate_std_trace( executable executable, pkg pkg, directory directory, runtime_sec runtime_sec, rmw rmw ) Generate a tracefile for the given executable using the 'std' method. The 'std' method logs stdout of the executable. function generate_memory_trace generate_memory_trace( executable executable, pkg pkg, directory directory, runtime_sec runtime_sec, rmw rmw ) Generate a tracefile for the given executable using the 'memory' method. The 'memory' method uses `psrecord` to profile memory and CPU usage. function generate_callback_trace generate_callback_trace( executable executable, pkg pkg, directory directory, runtime_sec runtime_sec, rmw rmw ) Generate a tracefile for the given executable using the 'callback' method. The 'callback' method measures the executable using 'ros2 trace' function available_executables available_executables( pkg pkg, pattern pattern =' *' ) Attributes Documentation variable tracetools_available bool tracetools_available = True; variable ROS_HOME ROS_HOME = Path(os.environ.get('ROS_HOME', os.environ['HOME']+'/.ros')); variable REFERENCE_SYSTEM_SHARE_DIR REFERENCE_SYSTEM_SHARE_DIR = Path(get_package_share_directory('reference_system')); Updated on 2024-10-24 at 09:15:15 +0000","title":"reference_system_py::benchmark"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1benchmark/#reference_system_pybenchmark","text":"","title":"reference_system_py::benchmark"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1benchmark/#functions","text":"Name terminatingRos2Run (pkg pkg, executable executable, rmw rmw, env env =os.environ, args args =[], ** kwargs) setup_benchmark_directory (pkg pkg, create create =False) roudi_daemon (env env =os.environ, roudi_config_path roudi_config_path =None) get_benchmark_directory (base_directory base_directory, executable executable, runtime_sec runtime_sec, rmw rmw, create create =False) get_benchmark_directories_below (base_directory base_directory, runtime_sec runtime_sec =None) generate_trace (trace_type trace_type, * args, ** kwargs) generate_std_trace (executable executable, pkg pkg, directory directory, runtime_sec runtime_sec, rmw rmw) generate_memory_trace (executable executable, pkg pkg, directory directory, runtime_sec runtime_sec, rmw rmw) generate_callback_trace (executable executable, pkg pkg, directory directory, runtime_sec runtime_sec, rmw rmw) available_executables (pkg pkg, pattern pattern =' *')","title":"Functions"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1benchmark/#attributes","text":"Name bool tracetools_available ROS_HOME REFERENCE_SYSTEM_SHARE_DIR","title":"Attributes"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1benchmark/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1benchmark/#function-terminatingros2run","text":"terminatingRos2Run( pkg pkg, executable executable, rmw rmw, env env =os.environ, args args =[], ** kwargs ) Run the given executable (part of the given package) under the given rmw. The executable is automatically terminated upon exit from the context","title":"function terminatingRos2Run"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1benchmark/#function-setup_benchmark_directory","text":"setup_benchmark_directory( pkg pkg, create create =False )","title":"function setup_benchmark_directory"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1benchmark/#function-roudi_daemon","text":"roudi_daemon( env env =os.environ, roudi_config_path roudi_config_path =None ) Context manager that runs a RouDi instance for the duration of the context. The `env` parameter specifies environment variables for the RouDi process. The `roudi_config_path` parameter can be used to provide a RouDi toml configuration file.","title":"function roudi_daemon"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1benchmark/#function-get_benchmark_directory","text":"get_benchmark_directory( base_directory base_directory, executable executable, runtime_sec runtime_sec, rmw rmw, create create =False ) Return the directory to place measurements and reports for the given experiment. If `create` is True, the directory is created if it does not exist yet.","title":"function get_benchmark_directory"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1benchmark/#function-get_benchmark_directories_below","text":"get_benchmark_directories_below( base_directory base_directory, runtime_sec runtime_sec =None ) Return all benchmark directories found below `base_directory`.``` ### function generate_trace ```python generate_trace( trace_type trace_type, * args, ** kwargs )","title":"function get_benchmark_directories_below"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1benchmark/#function-generate_std_trace","text":"generate_std_trace( executable executable, pkg pkg, directory directory, runtime_sec runtime_sec, rmw rmw ) Generate a tracefile for the given executable using the 'std' method. The 'std' method logs stdout of the executable.","title":"function generate_std_trace"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1benchmark/#function-generate_memory_trace","text":"generate_memory_trace( executable executable, pkg pkg, directory directory, runtime_sec runtime_sec, rmw rmw ) Generate a tracefile for the given executable using the 'memory' method. The 'memory' method uses `psrecord` to profile memory and CPU usage.","title":"function generate_memory_trace"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1benchmark/#function-generate_callback_trace","text":"generate_callback_trace( executable executable, pkg pkg, directory directory, runtime_sec runtime_sec, rmw rmw ) Generate a tracefile for the given executable using the 'callback' method. The 'callback' method measures the executable using 'ros2 trace'","title":"function generate_callback_trace"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1benchmark/#function-available_executables","text":"available_executables( pkg pkg, pattern pattern =' *' )","title":"function available_executables"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1benchmark/#attributes-documentation","text":"","title":"Attributes Documentation"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1benchmark/#variable-tracetools_available","text":"bool tracetools_available = True;","title":"variable tracetools_available"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1benchmark/#variable-ros_home","text":"ROS_HOME = Path(os.environ.get('ROS_HOME', os.environ['HOME']+'/.ros'));","title":"variable ROS_HOME"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1benchmark/#variable-reference_system_share_dir","text":"REFERENCE_SYSTEM_SHARE_DIR = Path(get_package_share_directory('reference_system')); Updated on 2024-10-24 at 09:15:15 +0000","title":"variable REFERENCE_SYSTEM_SHARE_DIR"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1callback__duration/","text":"reference_system_py::callback_duration Functions Name summary (data_model data_model, size size) individual (data_model data_model, size size) Functions Documentation function summary summary( data_model data_model, size size ) function individual individual( data_model data_model, size size ) Updated on 2024-10-24 at 09:15:15 +0000","title":"reference_system_py::callback_duration"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1callback__duration/#reference_system_pycallback_duration","text":"","title":"reference_system_py::callback_duration"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1callback__duration/#functions","text":"Name summary (data_model data_model, size size) individual (data_model data_model, size size)","title":"Functions"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1callback__duration/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1callback__duration/#function-summary","text":"summary( data_model data_model, size size )","title":"function summary"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1callback__duration/#function-individual","text":"individual( data_model data_model, size size ) Updated on 2024-10-24 at 09:15:15 +0000","title":"function individual"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1constants/","text":"reference_system_py::constants Attributes Name str TRACE_STD str TRACE_MEMORY str TRACE_DIRECTORY str TRACE_CALLBACK str SIZE_TITLE int SIZE_TABLE_WIDTH int SIZE_TABLE_ROW int SIZE_SUMMARY int SIZE_SUBPLOT str SIZE_MAJOR_LABEL str SIZE_CATEGORY_LABEL str SIZE_AXIS_LABEL Attributes Documentation variable TRACE_STD str TRACE_STD = 'log'; variable TRACE_MEMORY str TRACE_MEMORY = 'memory'; variable TRACE_DIRECTORY str TRACE_DIRECTORY = 'tracing'; variable TRACE_CALLBACK str TRACE_CALLBACK = 'tracing'; variable SIZE_TITLE str SIZE_TITLE = '22px'; variable SIZE_TABLE_WIDTH int SIZE_TABLE_WIDTH = 1250; variable SIZE_TABLE_ROW int SIZE_TABLE_ROW = 50; variable SIZE_SUMMARY int SIZE_SUMMARY = 800; variable SIZE_SUBPLOT int SIZE_SUBPLOT = 500; variable SIZE_MAJOR_LABEL str SIZE_MAJOR_LABEL = '14px'; variable SIZE_CATEGORY_LABEL str SIZE_CATEGORY_LABEL = '15px'; variable SIZE_AXIS_LABEL str SIZE_AXIS_LABEL = '20px'; Updated on 2024-10-24 at 09:15:15 +0000","title":"reference_system_py::constants"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1constants/#reference_system_pyconstants","text":"","title":"reference_system_py::constants"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1constants/#attributes","text":"Name str TRACE_STD str TRACE_MEMORY str TRACE_DIRECTORY str TRACE_CALLBACK str SIZE_TITLE int SIZE_TABLE_WIDTH int SIZE_TABLE_ROW int SIZE_SUMMARY int SIZE_SUBPLOT str SIZE_MAJOR_LABEL str SIZE_CATEGORY_LABEL str SIZE_AXIS_LABEL","title":"Attributes"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1constants/#attributes-documentation","text":"","title":"Attributes Documentation"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1constants/#variable-trace_std","text":"str TRACE_STD = 'log';","title":"variable TRACE_STD"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1constants/#variable-trace_memory","text":"str TRACE_MEMORY = 'memory';","title":"variable TRACE_MEMORY"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1constants/#variable-trace_directory","text":"str TRACE_DIRECTORY = 'tracing';","title":"variable TRACE_DIRECTORY"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1constants/#variable-trace_callback","text":"str TRACE_CALLBACK = 'tracing';","title":"variable TRACE_CALLBACK"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1constants/#variable-size_title","text":"str SIZE_TITLE = '22px';","title":"variable SIZE_TITLE"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1constants/#variable-size_table_width","text":"int SIZE_TABLE_WIDTH = 1250;","title":"variable SIZE_TABLE_WIDTH"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1constants/#variable-size_table_row","text":"int SIZE_TABLE_ROW = 50;","title":"variable SIZE_TABLE_ROW"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1constants/#variable-size_summary","text":"int SIZE_SUMMARY = 800;","title":"variable SIZE_SUMMARY"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1constants/#variable-size_subplot","text":"int SIZE_SUBPLOT = 500;","title":"variable SIZE_SUBPLOT"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1constants/#variable-size_major_label","text":"str SIZE_MAJOR_LABEL = '14px';","title":"variable SIZE_MAJOR_LABEL"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1constants/#variable-size_category_label","text":"str SIZE_CATEGORY_LABEL = '15px';","title":"variable SIZE_CATEGORY_LABEL"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1constants/#variable-size_axis_label","text":"str SIZE_AXIS_LABEL = '20px'; Updated on 2024-10-24 at 09:15:15 +0000","title":"variable SIZE_AXIS_LABEL"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1dropped__messages/","text":"reference_system_py::dropped_messages Functions Name parseData (data_model data_model) individual (data_model data_model, size size) getRunTime (start start, end end) generateNodeGraph (dataframe dataframe) countDropped (dataframe dataframe, node_graph node_graph) calcTotals (run_time run_time, dataframe dataframe) Attributes Name bool nx_available Functions Documentation function parseData parseData( data_model data_model ) function individual individual( data_model data_model, size size ) function getRunTime getRunTime( start start, end end ) function generateNodeGraph generateNodeGraph( dataframe dataframe ) function countDropped countDropped( dataframe dataframe, node_graph node_graph ) function calcTotals calcTotals( run_time run_time, dataframe dataframe ) Attributes Documentation variable nx_available bool nx_available = True; Updated on 2024-10-24 at 09:15:15 +0000","title":"reference_system_py::dropped_messages"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1dropped__messages/#reference_system_pydropped_messages","text":"","title":"reference_system_py::dropped_messages"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1dropped__messages/#functions","text":"Name parseData (data_model data_model) individual (data_model data_model, size size) getRunTime (start start, end end) generateNodeGraph (dataframe dataframe) countDropped (dataframe dataframe, node_graph node_graph) calcTotals (run_time run_time, dataframe dataframe)","title":"Functions"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1dropped__messages/#attributes","text":"Name bool nx_available","title":"Attributes"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1dropped__messages/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1dropped__messages/#function-parsedata","text":"parseData( data_model data_model )","title":"function parseData"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1dropped__messages/#function-individual","text":"individual( data_model data_model, size size )","title":"function individual"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1dropped__messages/#function-getruntime","text":"getRunTime( start start, end end )","title":"function getRunTime"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1dropped__messages/#function-generatenodegraph","text":"generateNodeGraph( dataframe dataframe )","title":"function generateNodeGraph"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1dropped__messages/#function-countdropped","text":"countDropped( dataframe dataframe, node_graph node_graph )","title":"function countDropped"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1dropped__messages/#function-calctotals","text":"calcTotals( run_time run_time, dataframe dataframe )","title":"function calcTotals"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1dropped__messages/#attributes-documentation","text":"","title":"Attributes Documentation"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1dropped__messages/#variable-nx_available","text":"bool nx_available = True; Updated on 2024-10-24 at 09:15:15 +0000","title":"variable nx_available"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1memory__usage/","text":"reference_system_py::memory_usage Functions Name summary_from_directories (dirs dirs, duration duration, size size) individual (path path, size size) Functions Documentation function summary_from_directories summary_from_directories( dirs dirs, duration duration, size size ) function individual individual( path path, size size ) Updated on 2024-10-24 at 09:15:15 +0000","title":"reference_system_py::memory_usage"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1memory__usage/#reference_system_pymemory_usage","text":"","title":"reference_system_py::memory_usage"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1memory__usage/#functions","text":"Name summary_from_directories (dirs dirs, duration duration, size size) individual (path path, size size)","title":"Functions"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1memory__usage/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1memory__usage/#function-summary_from_directories","text":"summary_from_directories( dirs dirs, duration duration, size size )","title":"function summary_from_directories"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1memory__usage/#function-individual","text":"individual( path path, size size ) Updated on 2024-10-24 at 09:15:15 +0000","title":"function individual"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1plot__utils/","text":"reference_system_py::plot_utils Functions Name plot_barplot (fig fig, data_source data_source, fill_color fill_color ='gray') Functions Documentation function plot_barplot plot_barplot( fig fig, data_source data_source, fill_color fill_color ='gray' ) Plot a barplot in `fig` using data from `data_source`. `data_source` is assumed to contain the following columns: - 'x' contains the x-coordinate - 'low' and 'high' contain the minimum/maximum - 'box_bottom' and 'box_top' contain the beginning/end of the box (mean +- stddev) - 'mean' contains the mean value Updated on 2024-10-24 at 09:15:15 +0000","title":"reference_system_py::plot_utils"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1plot__utils/#reference_system_pyplot_utils","text":"","title":"reference_system_py::plot_utils"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1plot__utils/#functions","text":"Name plot_barplot (fig fig, data_source data_source, fill_color fill_color ='gray')","title":"Functions"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1plot__utils/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1plot__utils/#function-plot_barplot","text":"plot_barplot( fig fig, data_source data_source, fill_color fill_color ='gray' ) Plot a barplot in `fig` using data from `data_source`. `data_source` is assumed to contain the following columns: - 'x' contains the x-coordinate - 'low' and 'high' contain the minimum/maximum - 'box_bottom' and 'box_top' contain the beginning/end of the box (mean +- stddev) - 'mean' contains the mean value Updated on 2024-10-24 at 09:15:15 +0000","title":"function plot_barplot"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1report/","text":"reference_system_py::report Functions Name generate_summary_report (trace_type trace_type, pkg pkg, directory directory, runtime_sec runtime_sec, template_file template_file) generate_report (trace_type trace_type, * args, ** kwargs) generate_memory_report (executable executable, pkg pkg, directory directory, runtime_sec runtime_sec, rmw rmw) generate_callback_report (executable executable, pkg pkg, directory directory, runtime_sec runtime_sec, rmw rmw) fill_in_template (Path template_file, str report_title, dict figures) Attributes Name bool tracetools_available Functions Documentation function generate_summary_report generate_summary_report( trace_type trace_type, pkg pkg, directory directory, runtime_sec runtime_sec, template_file template_file ) Generate a summary report for the given `trace_type`, using all traces under `directory`.``` ### function generate_report ```python generate_report( trace_type trace_type, * args, ** kwargs ) function generate_memory_report generate_memory_report( executable executable, pkg pkg, directory directory, runtime_sec runtime_sec, rmw rmw ) Generate a per-executable report from the 'memory' trace file.``` ### function generate_callback_report ```python generate_callback_report( executable executable, pkg pkg, directory directory, runtime_sec runtime_sec, rmw rmw ) Generate a per-executable report from the 'callback' trace file.``` ### function fill_in_template ```python fill_in_template( Path template_file, str report_title, dict figures ) Fill in the given tempalte file with the supplied figures. template_file: Full path to template file, including template file name report_title: Title of report figures: Figures to insert into report Attributes Documentation variable tracetools_available bool tracetools_available = True; Updated on 2024-10-24 at 09:15:15 +0000","title":"reference_system_py::report"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1report/#reference_system_pyreport","text":"","title":"reference_system_py::report"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1report/#functions","text":"Name generate_summary_report (trace_type trace_type, pkg pkg, directory directory, runtime_sec runtime_sec, template_file template_file) generate_report (trace_type trace_type, * args, ** kwargs) generate_memory_report (executable executable, pkg pkg, directory directory, runtime_sec runtime_sec, rmw rmw) generate_callback_report (executable executable, pkg pkg, directory directory, runtime_sec runtime_sec, rmw rmw) fill_in_template (Path template_file, str report_title, dict figures)","title":"Functions"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1report/#attributes","text":"Name bool tracetools_available","title":"Attributes"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1report/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1report/#function-generate_summary_report","text":"generate_summary_report( trace_type trace_type, pkg pkg, directory directory, runtime_sec runtime_sec, template_file template_file ) Generate a summary report for the given `trace_type`, using all traces under `directory`.``` ### function generate_report ```python generate_report( trace_type trace_type, * args, ** kwargs )","title":"function generate_summary_report"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1report/#function-generate_memory_report","text":"generate_memory_report( executable executable, pkg pkg, directory directory, runtime_sec runtime_sec, rmw rmw ) Generate a per-executable report from the 'memory' trace file.``` ### function generate_callback_report ```python generate_callback_report( executable executable, pkg pkg, directory directory, runtime_sec runtime_sec, rmw rmw ) Generate a per-executable report from the 'callback' trace file.``` ### function fill_in_template ```python fill_in_template( Path template_file, str report_title, dict figures ) Fill in the given tempalte file with the supplied figures. template_file: Full path to template file, including template file name report_title: Title of report figures: Figures to insert into report","title":"function generate_memory_report"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1report/#attributes-documentation","text":"","title":"Attributes Documentation"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1report/#variable-tracetools_available","text":"bool tracetools_available = True; Updated on 2024-10-24 at 09:15:15 +0000","title":"variable tracetools_available"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1std__latency/","text":"reference_system_py::std_latency Functions Name summary_from_directories (dirs dirs, duration duration, size size) parse_stats_from_values (latency_ latency_, min_ min_, max_ max_, average_ average_, deviation_ deviation_) parseLogSummaryFromFiles (files files, duration duration) Functions Documentation function summary_from_directories summary_from_directories( dirs dirs, duration duration, size size ) function parse_stats_from_values parse_stats_from_values( latency_ latency_, min_ min_, max_ max_, average_ average_, deviation_ deviation_ ) function parseLogSummaryFromFiles parseLogSummaryFromFiles( files files, duration duration ) Updated on 2024-10-24 at 09:15:15 +0000","title":"reference_system_py::std_latency"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1std__latency/#reference_system_pystd_latency","text":"","title":"reference_system_py::std_latency"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1std__latency/#functions","text":"Name summary_from_directories (dirs dirs, duration duration, size size) parse_stats_from_values (latency_ latency_, min_ min_, max_ max_, average_ average_, deviation_ deviation_) parseLogSummaryFromFiles (files files, duration duration)","title":"Functions"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1std__latency/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1std__latency/#function-summary_from_directories","text":"summary_from_directories( dirs dirs, duration duration, size size )","title":"function summary_from_directories"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1std__latency/#function-parse_stats_from_values","text":"parse_stats_from_values( latency_ latency_, min_ min_, max_ max_, average_ average_, deviation_ deviation_ )","title":"function parse_stats_from_values"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1std__latency/#function-parselogsummaryfromfiles","text":"parseLogSummaryFromFiles( files files, duration duration ) Updated on 2024-10-24 at 09:15:15 +0000","title":"function parseLogSummaryFromFiles"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1trace__utils/","text":"reference_system_py::trace_utils Functions Name initDataModel (path path) Functions Documentation function initDataModel initDataModel( path path ) Updated on 2024-10-24 at 09:15:15 +0000","title":"reference_system_py::trace_utils"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1trace__utils/#reference_system_pytrace_utils","text":"","title":"reference_system_py::trace_utils"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1trace__utils/#functions","text":"Name initDataModel (path path)","title":"Functions"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1trace__utils/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"api-reference/Namespaces/namespacereference__system__py_1_1trace__utils/#function-initdatamodel","text":"initDataModel( path path ) Updated on 2024-10-24 at 09:15:15 +0000","title":"function initDataModel"},{"location":"api-reference/Namespaces/namespacesetup/","text":"setup Attributes Name version tests_require packages str package_name name license entry_points description data_files author_email author Attributes Documentation variable version version; variable tests_require tests_require; variable packages packages; variable package_name str package_name = 'reference_system'; variable name name; variable license license; variable entry_points entry_points; variable description description; variable data_files data_files; variable author_email author_email; variable author author; Updated on 2024-10-24 at 09:15:15 +0000","title":"setup"},{"location":"api-reference/Namespaces/namespacesetup/#setup","text":"","title":"setup"},{"location":"api-reference/Namespaces/namespacesetup/#attributes","text":"Name version tests_require packages str package_name name license entry_points description data_files author_email author","title":"Attributes"},{"location":"api-reference/Namespaces/namespacesetup/#attributes-documentation","text":"","title":"Attributes Documentation"},{"location":"api-reference/Namespaces/namespacesetup/#variable-version","text":"version;","title":"variable version"},{"location":"api-reference/Namespaces/namespacesetup/#variable-tests_require","text":"tests_require;","title":"variable tests_require"},{"location":"api-reference/Namespaces/namespacesetup/#variable-packages","text":"packages;","title":"variable packages"},{"location":"api-reference/Namespaces/namespacesetup/#variable-package_name","text":"str package_name = 'reference_system';","title":"variable package_name"},{"location":"api-reference/Namespaces/namespacesetup/#variable-name","text":"name;","title":"variable name"},{"location":"api-reference/Namespaces/namespacesetup/#variable-license","text":"license;","title":"variable license"},{"location":"api-reference/Namespaces/namespacesetup/#variable-entry_points","text":"entry_points;","title":"variable entry_points"},{"location":"api-reference/Namespaces/namespacesetup/#variable-description","text":"description;","title":"variable description"},{"location":"api-reference/Namespaces/namespacesetup/#variable-data_files","text":"data_files;","title":"variable data_files"},{"location":"api-reference/Namespaces/namespacesetup/#variable-author_email","text":"author_email;","title":"variable author_email"},{"location":"api-reference/Namespaces/namespacesetup/#variable-author","text":"author; Updated on 2024-10-24 at 09:15:15 +0000","title":"variable author"},{"location":"api-reference/Namespaces/namespacestd_1_1chrono__literals/","text":"std::chrono_literals Updated on 2024-10-24 at 09:15:15 +0000","title":"std::chrono_literals"},{"location":"api-reference/Namespaces/namespacestd_1_1chrono__literals/#stdchrono_literals","text":"Updated on 2024-10-24 at 09:15:15 +0000","title":"std::chrono_literals"},{"location":"api-reference/Namespaces/namespacetest__platform/","text":"test_platform Functions Name test_platform (record_property record_property) Attributes Name dict platforms Functions Documentation function test_platform test_platform( record_property record_property ) Attributes Documentation variable platforms dict platforms = {}; Updated on 2024-10-24 at 09:15:15 +0000","title":"test_platform"},{"location":"api-reference/Namespaces/namespacetest__platform/#test_platform","text":"","title":"test_platform"},{"location":"api-reference/Namespaces/namespacetest__platform/#functions","text":"Name test_platform (record_property record_property)","title":"Functions"},{"location":"api-reference/Namespaces/namespacetest__platform/#attributes","text":"Name dict platforms","title":"Attributes"},{"location":"api-reference/Namespaces/namespacetest__platform/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"api-reference/Namespaces/namespacetest__platform/#function-test_platform","text":"test_platform( record_property record_property )","title":"function test_platform"},{"location":"api-reference/Namespaces/namespacetest__platform/#attributes-documentation","text":"","title":"Attributes Documentation"},{"location":"api-reference/Namespaces/namespacetest__platform/#variable-platforms","text":"dict platforms = {}; Updated on 2024-10-24 at 09:15:15 +0000","title":"variable platforms"},{"location":"api-reference/Namespaces/namespacetest__requirements/","text":"test_requirements Classes Name class test_requirements::TestRequirementsAutowareReferenceSystem Functions Name generate_test_description () Attributes Name dict reference_system dict checks Functions Documentation function generate_test_description generate_test_description() Attributes Documentation variable reference_system dict reference_system = { '/FrontLidarDriver': {'pub_count': 1, 'sub_count': 1, 'checks': checks.copy()}, '/RearLidarDriver': {'pub_count': 1, 'sub_count': 1, 'checks': checks.copy()}, '/PointCloudMap': {'pub_count': 1, 'sub_count': 1, 'checks': checks.copy()}, '/Visualizer': {'pub_count': 1, 'sub_count': 1, 'checks': checks.copy()}, '/Lanelet2Map': {'pub_count': 1, 'sub_count': 1, 'checks': checks.copy()}, '/PointsTransformerFront': {'pub_count': 1, 'sub_count': 1, 'checks': checks.copy()}, '/PointsTransformerRear': {'pub_count': 1, 'sub_count': 1, 'checks': checks.copy()}, '/VoxelGridDownsampler': {'pub_count': 1, 'sub_count': 1, 'checks': checks.copy()}, '/PointCloudMapLoader': {'pub_count': 1, 'sub_count': 1, 'checks': checks.copy()}, '/EuclideanClusterDetector': {'pub_count': 1, 'sub_count': 1, 'checks': checks.copy()}, '/ObjectCollisionEstimator': {'pub_count': 1, 'sub_count': 1, 'checks': checks.copy()}, '/MPCController': {'pub_count': 1, 'sub_count': 1, 'checks': checks.copy()}, '/ParkingPlanner': {'pub_count': 1, 'sub_count': 1, 'checks': checks.copy()}, '/LanePlanner': {'pub_count': 1, 'sub_count': 1, 'checks': checks.copy()}, '/PointCloudFusion': {'pub_count': 1, 'sub_count': 2, 'checks': checks.copy()}, '/NDTLocalizer': {'pub_count': 1, 'sub_count': 2, 'checks': checks.copy()}, '/VehicleInterface': {'pub_count': 1, 'sub_count': 1, 'checks': checks.copy()}, '/Lanelet2GlobalPlanner': {'pub_count': 1, 'sub_count': 2, 'checks': checks.copy()}, '/Lanelet2MapLoader': {'pub_count': 1, 'sub_count': 3, 'checks': checks.copy()}, '/BehaviorPlanner': {'pub_count': 1, 'sub_count': 2, 'checks': checks.copy()} # does not exist as topic but only as a node # '/VehicleDBWSystem': {'pub_count': 0, 'sub_count': 0, 'checks': checks.copy()} }; variable checks dict checks = {'topic_exists': False, 'pubs_match': False, 'subs_match': False}; Updated on 2024-10-24 at 09:15:15 +0000","title":"test_requirements"},{"location":"api-reference/Namespaces/namespacetest__requirements/#test_requirements","text":"","title":"test_requirements"},{"location":"api-reference/Namespaces/namespacetest__requirements/#classes","text":"Name class test_requirements::TestRequirementsAutowareReferenceSystem","title":"Classes"},{"location":"api-reference/Namespaces/namespacetest__requirements/#functions","text":"Name generate_test_description ()","title":"Functions"},{"location":"api-reference/Namespaces/namespacetest__requirements/#attributes","text":"Name dict reference_system dict checks","title":"Attributes"},{"location":"api-reference/Namespaces/namespacetest__requirements/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"api-reference/Namespaces/namespacetest__requirements/#function-generate_test_description","text":"generate_test_description()","title":"function generate_test_description"},{"location":"api-reference/Namespaces/namespacetest__requirements/#attributes-documentation","text":"","title":"Attributes Documentation"},{"location":"api-reference/Namespaces/namespacetest__requirements/#variable-reference_system","text":"dict reference_system = { '/FrontLidarDriver': {'pub_count': 1, 'sub_count': 1, 'checks': checks.copy()}, '/RearLidarDriver': {'pub_count': 1, 'sub_count': 1, 'checks': checks.copy()}, '/PointCloudMap': {'pub_count': 1, 'sub_count': 1, 'checks': checks.copy()}, '/Visualizer': {'pub_count': 1, 'sub_count': 1, 'checks': checks.copy()}, '/Lanelet2Map': {'pub_count': 1, 'sub_count': 1, 'checks': checks.copy()}, '/PointsTransformerFront': {'pub_count': 1, 'sub_count': 1, 'checks': checks.copy()}, '/PointsTransformerRear': {'pub_count': 1, 'sub_count': 1, 'checks': checks.copy()}, '/VoxelGridDownsampler': {'pub_count': 1, 'sub_count': 1, 'checks': checks.copy()}, '/PointCloudMapLoader': {'pub_count': 1, 'sub_count': 1, 'checks': checks.copy()}, '/EuclideanClusterDetector': {'pub_count': 1, 'sub_count': 1, 'checks': checks.copy()}, '/ObjectCollisionEstimator': {'pub_count': 1, 'sub_count': 1, 'checks': checks.copy()}, '/MPCController': {'pub_count': 1, 'sub_count': 1, 'checks': checks.copy()}, '/ParkingPlanner': {'pub_count': 1, 'sub_count': 1, 'checks': checks.copy()}, '/LanePlanner': {'pub_count': 1, 'sub_count': 1, 'checks': checks.copy()}, '/PointCloudFusion': {'pub_count': 1, 'sub_count': 2, 'checks': checks.copy()}, '/NDTLocalizer': {'pub_count': 1, 'sub_count': 2, 'checks': checks.copy()}, '/VehicleInterface': {'pub_count': 1, 'sub_count': 1, 'checks': checks.copy()}, '/Lanelet2GlobalPlanner': {'pub_count': 1, 'sub_count': 2, 'checks': checks.copy()}, '/Lanelet2MapLoader': {'pub_count': 1, 'sub_count': 3, 'checks': checks.copy()}, '/BehaviorPlanner': {'pub_count': 1, 'sub_count': 2, 'checks': checks.copy()} # does not exist as topic but only as a node # '/VehicleDBWSystem': {'pub_count': 0, 'sub_count': 0, 'checks': checks.copy()} };","title":"variable reference_system"},{"location":"api-reference/Namespaces/namespacetest__requirements/#variable-checks","text":"dict checks = {'topic_exists': False, 'pubs_match': False, 'subs_match': False}; Updated on 2024-10-24 at 09:15:15 +0000","title":"variable checks"},{"location":"api-reference/Namespaces/namespacetesting/","text":"testing Updated on 2024-10-24 at 09:15:15 +0000","title":"testing"},{"location":"api-reference/Namespaces/namespacetesting/#testing","text":"Updated on 2024-10-24 at 09:15:15 +0000","title":"testing"},{"location":"api-reference/Namespaces/namespaceunittest/","text":"unittest Updated on 2024-10-24 at 09:15:15 +0000","title":"unittest"},{"location":"api-reference/Namespaces/namespaceunittest/#unittest","text":"Updated on 2024-10-24 at 09:15:15 +0000","title":"unittest"},{"location":"reports/","text":"Reference system reports Eventually this page will hold CI-run benchmarks that are updated regularly. Still a work in progress but please check back soon. Disclaimer regarding the reports The reports hosted here are ran on a vanilla Ubuntu CI system and should not be taken as the true performance of the system if it was running on a real-time embedded system. They are meant as a rough approximation for anyone looking for some quick data. For reports actually ran on a real-time benchmark system please see the ROS 2 real-time benchmarks site. If neither of the above solutions are appropriate run the reference system manually on the desired platform and generate the reports following the instructions .","title":"Reference system reports"},{"location":"reports/#reference-system-reports","text":"Eventually this page will hold CI-run benchmarks that are updated regularly. Still a work in progress but please check back soon.","title":"Reference system reports"},{"location":"reports/#disclaimer-regarding-the-reports","text":"The reports hosted here are ran on a vanilla Ubuntu CI system and should not be taken as the true performance of the system if it was running on a real-time embedded system. They are meant as a rough approximation for anyone looking for some quick data. For reports actually ran on a real-time benchmark system please see the ROS 2 real-time benchmarks site. If neither of the above solutions are appropriate run the reference system manually on the desired platform and generate the reports following the instructions .","title":"Disclaimer regarding the reports"}]}